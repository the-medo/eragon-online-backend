// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/the-medo/talebound-backend/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	db "github.com/the-medo/talebound-backend/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddUserPasswordReset mocks base method.
func (m *MockStore) AddUserPasswordReset(arg0 context.Context, arg1 db.AddUserPasswordResetParams) (db.UserPasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(db.UserPasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserPasswordReset indicates an expected call of AddUserPasswordReset.
func (mr *MockStoreMockRecorder) AddUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPasswordReset", reflect.TypeOf((*MockStore)(nil).AddUserPasswordReset), arg0, arg1)
}

// AddUserRole mocks base method.
func (m *MockStore) AddUserRole(arg0 context.Context, arg1 db.AddUserRoleParams) (db.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserRole indicates an expected call of AddUserRole.
func (mr *MockStoreMockRecorder) AddUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserRole", reflect.TypeOf((*MockStore)(nil).AddUserRole), arg0, arg1)
}

// CreateCharacter mocks base method.
func (m *MockStore) CreateCharacter(arg0 context.Context, arg1 db.CreateCharacterParams) (db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockStoreMockRecorder) CreateCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockStore)(nil).CreateCharacter), arg0, arg1)
}

// CreateEntity mocks base method.
func (m *MockStore) CreateEntity(arg0 context.Context, arg1 db.CreateEntityParams) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntity", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntity indicates an expected call of CreateEntity.
func (mr *MockStoreMockRecorder) CreateEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntity", reflect.TypeOf((*MockStore)(nil).CreateEntity), arg0, arg1)
}

// CreateEntityGroup mocks base method.
func (m *MockStore) CreateEntityGroup(arg0 context.Context, arg1 db.CreateEntityGroupParams) (db.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityGroup indicates an expected call of CreateEntityGroup.
func (mr *MockStoreMockRecorder) CreateEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityGroup", reflect.TypeOf((*MockStore)(nil).CreateEntityGroup), arg0, arg1)
}

// CreateEntityGroupContent mocks base method.
func (m *MockStore) CreateEntityGroupContent(arg0 context.Context, arg1 db.CreateEntityGroupContentParams) (db.EntityGroupContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityGroupContent", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroupContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityGroupContent indicates an expected call of CreateEntityGroupContent.
func (mr *MockStoreMockRecorder) CreateEntityGroupContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityGroupContent", reflect.TypeOf((*MockStore)(nil).CreateEntityGroupContent), arg0, arg1)
}

// CreateEntityTag mocks base method.
func (m *MockStore) CreateEntityTag(arg0 context.Context, arg1 db.CreateEntityTagParams) (db.EntityTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityTag", arg0, arg1)
	ret0, _ := ret[0].(db.EntityTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntityTag indicates an expected call of CreateEntityTag.
func (mr *MockStoreMockRecorder) CreateEntityTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityTag", reflect.TypeOf((*MockStore)(nil).CreateEntityTag), arg0, arg1)
}

// CreateEvaluationVote mocks base method.
func (m *MockStore) CreateEvaluationVote(arg0 context.Context, arg1 db.CreateEvaluationVoteParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluationVote indicates an expected call of CreateEvaluationVote.
func (mr *MockStoreMockRecorder) CreateEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationVote", reflect.TypeOf((*MockStore)(nil).CreateEvaluationVote), arg0, arg1)
}

// CreateImage mocks base method.
func (m *MockStore) CreateImage(arg0 context.Context, arg1 db.CreateImageParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockStoreMockRecorder) CreateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockStore)(nil).CreateImage), arg0, arg1)
}

// CreateLocation mocks base method.
func (m *MockStore) CreateLocation(arg0 context.Context, arg1 db.CreateLocationParams) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0, arg1)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockStoreMockRecorder) CreateLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockStore)(nil).CreateLocation), arg0, arg1)
}

// CreateMap mocks base method.
func (m *MockStore) CreateMap(arg0 context.Context, arg1 db.CreateMapParams) (db.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMap", arg0, arg1)
	ret0, _ := ret[0].(db.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMap indicates an expected call of CreateMap.
func (mr *MockStoreMockRecorder) CreateMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMap", reflect.TypeOf((*MockStore)(nil).CreateMap), arg0, arg1)
}

// CreateMapLayer mocks base method.
func (m *MockStore) CreateMapLayer(arg0 context.Context, arg1 db.CreateMapLayerParams) (db.MapLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapLayer", arg0, arg1)
	ret0, _ := ret[0].(db.MapLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapLayer indicates an expected call of CreateMapLayer.
func (mr *MockStoreMockRecorder) CreateMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapLayer", reflect.TypeOf((*MockStore)(nil).CreateMapLayer), arg0, arg1)
}

// CreateMapPin mocks base method.
func (m *MockStore) CreateMapPin(arg0 context.Context, arg1 db.CreateMapPinParams) (db.MapPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapPin", arg0, arg1)
	ret0, _ := ret[0].(db.MapPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapPin indicates an expected call of CreateMapPin.
func (mr *MockStoreMockRecorder) CreateMapPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapPin", reflect.TypeOf((*MockStore)(nil).CreateMapPin), arg0, arg1)
}

// CreateMapPinType mocks base method.
func (m *MockStore) CreateMapPinType(arg0 context.Context, arg1 db.CreateMapPinTypeParams) (db.MapPinType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapPinType", arg0, arg1)
	ret0, _ := ret[0].(db.MapPinType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapPinType indicates an expected call of CreateMapPinType.
func (mr *MockStoreMockRecorder) CreateMapPinType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapPinType", reflect.TypeOf((*MockStore)(nil).CreateMapPinType), arg0, arg1)
}

// CreateMapPinTypeGroup mocks base method.
func (m *MockStore) CreateMapPinTypeGroup(arg0 context.Context, arg1 string) (db.MapPinTypeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(db.MapPinTypeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMapPinTypeGroup indicates an expected call of CreateMapPinTypeGroup.
func (mr *MockStoreMockRecorder) CreateMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).CreateMapPinTypeGroup), arg0, arg1)
}

// CreateMenu mocks base method.
func (m *MockStore) CreateMenu(arg0 context.Context, arg1 db.CreateMenuParams) (db.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMenu", arg0, arg1)
	ret0, _ := ret[0].(db.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMenu indicates an expected call of CreateMenu.
func (mr *MockStoreMockRecorder) CreateMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMenu", reflect.TypeOf((*MockStore)(nil).CreateMenu), arg0, arg1)
}

// CreateMenuItem mocks base method.
func (m *MockStore) CreateMenuItem(arg0 context.Context, arg1 db.CreateMenuItemParams) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMenuItem", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMenuItem indicates an expected call of CreateMenuItem.
func (mr *MockStoreMockRecorder) CreateMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMenuItem", reflect.TypeOf((*MockStore)(nil).CreateMenuItem), arg0, arg1)
}

// CreateModule mocks base method.
func (m *MockStore) CreateModule(arg0 context.Context, arg1 db.CreateModuleParams) (db.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModule", arg0, arg1)
	ret0, _ := ret[0].(db.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModule indicates an expected call of CreateModule.
func (mr *MockStoreMockRecorder) CreateModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModule", reflect.TypeOf((*MockStore)(nil).CreateModule), arg0, arg1)
}

// CreateModuleAdmin mocks base method.
func (m *MockStore) CreateModuleAdmin(arg0 context.Context, arg1 db.CreateModuleAdminParams) (db.ModuleAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModuleAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.ModuleAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModuleAdmin indicates an expected call of CreateModuleAdmin.
func (mr *MockStoreMockRecorder) CreateModuleAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModuleAdmin", reflect.TypeOf((*MockStore)(nil).CreateModuleAdmin), arg0, arg1)
}

// CreateModuleEntityTagAvailable mocks base method.
func (m *MockStore) CreateModuleEntityTagAvailable(arg0 context.Context, arg1 db.CreateModuleEntityTagAvailableParams) (db.ModuleEntityTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModuleEntityTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(db.ModuleEntityTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModuleEntityTagAvailable indicates an expected call of CreateModuleEntityTagAvailable.
func (mr *MockStoreMockRecorder) CreateModuleEntityTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModuleEntityTagAvailable", reflect.TypeOf((*MockStore)(nil).CreateModuleEntityTagAvailable), arg0, arg1)
}

// CreateModuleMapPinTypeGroup mocks base method.
func (m *MockStore) CreateModuleMapPinTypeGroup(arg0 context.Context, arg1 db.CreateModuleMapPinTypeGroupParams) (db.ModuleMapPinTypeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModuleMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(db.ModuleMapPinTypeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModuleMapPinTypeGroup indicates an expected call of CreateModuleMapPinTypeGroup.
func (mr *MockStoreMockRecorder) CreateModuleMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModuleMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).CreateModuleMapPinTypeGroup), arg0, arg1)
}

// CreateModuleTag mocks base method.
func (m *MockStore) CreateModuleTag(arg0 context.Context, arg1 db.CreateModuleTagParams) (db.ModuleTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModuleTag", arg0, arg1)
	ret0, _ := ret[0].(db.ModuleTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModuleTag indicates an expected call of CreateModuleTag.
func (mr *MockStoreMockRecorder) CreateModuleTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModuleTag", reflect.TypeOf((*MockStore)(nil).CreateModuleTag), arg0, arg1)
}

// CreateModuleTypeTagAvailable mocks base method.
func (m *MockStore) CreateModuleTypeTagAvailable(arg0 context.Context, arg1 db.CreateModuleTypeTagAvailableParams) (db.ModuleTypeTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModuleTypeTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(db.ModuleTypeTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModuleTypeTagAvailable indicates an expected call of CreateModuleTypeTagAvailable.
func (mr *MockStoreMockRecorder) CreateModuleTypeTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModuleTypeTagAvailable", reflect.TypeOf((*MockStore)(nil).CreateModuleTypeTagAvailable), arg0, arg1)
}

// CreatePost mocks base method.
func (m *MockStore) CreatePost(arg0 context.Context, arg1 db.CreatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStoreMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStore)(nil).CreatePost), arg0, arg1)
}

// CreateQuest mocks base method.
func (m *MockStore) CreateQuest(arg0 context.Context, arg1 db.CreateQuestParams) (db.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuest", arg0, arg1)
	ret0, _ := ret[0].(db.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuest indicates an expected call of CreateQuest.
func (mr *MockStoreMockRecorder) CreateQuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuest", reflect.TypeOf((*MockStore)(nil).CreateQuest), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockStore) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockStore)(nil).CreateSession), arg0, arg1)
}

// CreateSystem mocks base method.
func (m *MockStore) CreateSystem(arg0 context.Context, arg1 db.CreateSystemParams) (db.System, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSystem", arg0, arg1)
	ret0, _ := ret[0].(db.System)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSystem indicates an expected call of CreateSystem.
func (mr *MockStoreMockRecorder) CreateSystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystem", reflect.TypeOf((*MockStore)(nil).CreateSystem), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockStore) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockStoreMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockStore)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockStore) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockStoreMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockStore)(nil).CreateVerifyEmail), arg0, arg1)
}

// CreateWorld mocks base method.
func (m *MockStore) CreateWorld(arg0 context.Context, arg1 db.CreateWorldParams) (db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorld", arg0, arg1)
	ret0, _ := ret[0].(db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorld indicates an expected call of CreateWorld.
func (mr *MockStoreMockRecorder) CreateWorld(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorld", reflect.TypeOf((*MockStore)(nil).CreateWorld), arg0, arg1)
}

// CreateWorldTx mocks base method.
func (m *MockStore) CreateWorldTx(arg0 context.Context, arg1 db.CreateWorldTxParams) (db.CreateWorldTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorldTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateWorldTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorldTx indicates an expected call of CreateWorldTx.
func (mr *MockStoreMockRecorder) CreateWorldTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorldTx", reflect.TypeOf((*MockStore)(nil).CreateWorldTx), arg0, arg1)
}

// DecreaseMapLayerPositions mocks base method.
func (m *MockStore) DecreaseMapLayerPositions(arg0 context.Context, arg1 db.DecreaseMapLayerPositionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseMapLayerPositions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseMapLayerPositions indicates an expected call of DecreaseMapLayerPositions.
func (mr *MockStoreMockRecorder) DecreaseMapLayerPositions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseMapLayerPositions", reflect.TypeOf((*MockStore)(nil).DecreaseMapLayerPositions), arg0, arg1)
}

// DeleteCharacter mocks base method.
func (m *MockStore) DeleteCharacter(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharacter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockStoreMockRecorder) DeleteCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockStore)(nil).DeleteCharacter), arg0, arg1)
}

// DeleteEntity mocks base method.
func (m *MockStore) DeleteEntity(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockStoreMockRecorder) DeleteEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockStore)(nil).DeleteEntity), arg0, arg1)
}

// DeleteEntityGroup mocks base method.
func (m *MockStore) DeleteEntityGroup(arg0 context.Context, arg1 db.DeleteEntityGroupParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntityGroup indicates an expected call of DeleteEntityGroup.
func (mr *MockStoreMockRecorder) DeleteEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityGroup", reflect.TypeOf((*MockStore)(nil).DeleteEntityGroup), arg0, arg1)
}

// DeleteEntityGroupContent mocks base method.
func (m *MockStore) DeleteEntityGroupContent(arg0 context.Context, arg1 db.DeleteEntityGroupContentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityGroupContent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntityGroupContent indicates an expected call of DeleteEntityGroupContent.
func (mr *MockStoreMockRecorder) DeleteEntityGroupContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityGroupContent", reflect.TypeOf((*MockStore)(nil).DeleteEntityGroupContent), arg0, arg1)
}

// DeleteEntityTag mocks base method.
func (m *MockStore) DeleteEntityTag(arg0 context.Context, arg1 db.DeleteEntityTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntityTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntityTag indicates an expected call of DeleteEntityTag.
func (mr *MockStoreMockRecorder) DeleteEntityTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntityTag", reflect.TypeOf((*MockStore)(nil).DeleteEntityTag), arg0, arg1)
}

// DeleteEvaluationVote mocks base method.
func (m *MockStore) DeleteEvaluationVote(arg0 context.Context, arg1 db.DeleteEvaluationVoteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluationVote indicates an expected call of DeleteEvaluationVote.
func (mr *MockStoreMockRecorder) DeleteEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationVote", reflect.TypeOf((*MockStore)(nil).DeleteEvaluationVote), arg0, arg1)
}

// DeleteImage mocks base method.
func (m *MockStore) DeleteImage(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockStoreMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockStore)(nil).DeleteImage), arg0, arg1)
}

// DeleteLocation mocks base method.
func (m *MockStore) DeleteLocation(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLocation indicates an expected call of DeleteLocation.
func (mr *MockStoreMockRecorder) DeleteLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockStore)(nil).DeleteLocation), arg0, arg1)
}

// DeleteMap mocks base method.
func (m *MockStore) DeleteMap(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMap indicates an expected call of DeleteMap.
func (mr *MockStoreMockRecorder) DeleteMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMap", reflect.TypeOf((*MockStore)(nil).DeleteMap), arg0, arg1)
}

// DeleteMapLayer mocks base method.
func (m *MockStore) DeleteMapLayer(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapLayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapLayer indicates an expected call of DeleteMapLayer.
func (mr *MockStoreMockRecorder) DeleteMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapLayer", reflect.TypeOf((*MockStore)(nil).DeleteMapLayer), arg0, arg1)
}

// DeleteMapLayersForMap mocks base method.
func (m *MockStore) DeleteMapLayersForMap(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapLayersForMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapLayersForMap indicates an expected call of DeleteMapLayersForMap.
func (mr *MockStoreMockRecorder) DeleteMapLayersForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapLayersForMap", reflect.TypeOf((*MockStore)(nil).DeleteMapLayersForMap), arg0, arg1)
}

// DeleteMapPin mocks base method.
func (m *MockStore) DeleteMapPin(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPin indicates an expected call of DeleteMapPin.
func (mr *MockStoreMockRecorder) DeleteMapPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPin", reflect.TypeOf((*MockStore)(nil).DeleteMapPin), arg0, arg1)
}

// DeleteMapPinType mocks base method.
func (m *MockStore) DeleteMapPinType(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPinType", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPinType indicates an expected call of DeleteMapPinType.
func (mr *MockStoreMockRecorder) DeleteMapPinType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPinType", reflect.TypeOf((*MockStore)(nil).DeleteMapPinType), arg0, arg1)
}

// DeleteMapPinTypeGroup mocks base method.
func (m *MockStore) DeleteMapPinTypeGroup(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPinTypeGroup indicates an expected call of DeleteMapPinTypeGroup.
func (mr *MockStoreMockRecorder) DeleteMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).DeleteMapPinTypeGroup), arg0, arg1)
}

// DeleteMapPinsForMap mocks base method.
func (m *MockStore) DeleteMapPinsForMap(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPinsForMap", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPinsForMap indicates an expected call of DeleteMapPinsForMap.
func (mr *MockStoreMockRecorder) DeleteMapPinsForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPinsForMap", reflect.TypeOf((*MockStore)(nil).DeleteMapPinsForMap), arg0, arg1)
}

// DeleteMapPinsForMapLayer mocks base method.
func (m *MockStore) DeleteMapPinsForMapLayer(arg0 context.Context, arg1 sql.NullInt32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapPinsForMapLayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapPinsForMapLayer indicates an expected call of DeleteMapPinsForMapLayer.
func (mr *MockStoreMockRecorder) DeleteMapPinsForMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapPinsForMapLayer", reflect.TypeOf((*MockStore)(nil).DeleteMapPinsForMapLayer), arg0, arg1)
}

// DeleteMenu mocks base method.
func (m *MockStore) DeleteMenu(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenu", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenu indicates an expected call of DeleteMenu.
func (mr *MockStoreMockRecorder) DeleteMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenu", reflect.TypeOf((*MockStore)(nil).DeleteMenu), arg0, arg1)
}

// DeleteMenuItem mocks base method.
func (m *MockStore) DeleteMenuItem(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMenuItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMenuItem indicates an expected call of DeleteMenuItem.
func (mr *MockStoreMockRecorder) DeleteMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMenuItem", reflect.TypeOf((*MockStore)(nil).DeleteMenuItem), arg0, arg1)
}

// DeleteModule mocks base method.
func (m *MockStore) DeleteModule(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModule indicates an expected call of DeleteModule.
func (mr *MockStoreMockRecorder) DeleteModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModule", reflect.TypeOf((*MockStore)(nil).DeleteModule), arg0, arg1)
}

// DeleteModuleAdmin mocks base method.
func (m *MockStore) DeleteModuleAdmin(arg0 context.Context, arg1 db.DeleteModuleAdminParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModuleAdmin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModuleAdmin indicates an expected call of DeleteModuleAdmin.
func (mr *MockStoreMockRecorder) DeleteModuleAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModuleAdmin", reflect.TypeOf((*MockStore)(nil).DeleteModuleAdmin), arg0, arg1)
}

// DeleteModuleEntityTagAvailable mocks base method.
func (m *MockStore) DeleteModuleEntityTagAvailable(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModuleEntityTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModuleEntityTagAvailable indicates an expected call of DeleteModuleEntityTagAvailable.
func (mr *MockStoreMockRecorder) DeleteModuleEntityTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModuleEntityTagAvailable", reflect.TypeOf((*MockStore)(nil).DeleteModuleEntityTagAvailable), arg0, arg1)
}

// DeleteModuleMapPinTypeGroup mocks base method.
func (m *MockStore) DeleteModuleMapPinTypeGroup(arg0 context.Context, arg1 db.DeleteModuleMapPinTypeGroupParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModuleMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModuleMapPinTypeGroup indicates an expected call of DeleteModuleMapPinTypeGroup.
func (mr *MockStoreMockRecorder) DeleteModuleMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModuleMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).DeleteModuleMapPinTypeGroup), arg0, arg1)
}

// DeleteModuleTag mocks base method.
func (m *MockStore) DeleteModuleTag(arg0 context.Context, arg1 db.DeleteModuleTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModuleTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModuleTag indicates an expected call of DeleteModuleTag.
func (mr *MockStoreMockRecorder) DeleteModuleTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModuleTag", reflect.TypeOf((*MockStore)(nil).DeleteModuleTag), arg0, arg1)
}

// DeleteModuleTypeTagAvailable mocks base method.
func (m *MockStore) DeleteModuleTypeTagAvailable(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModuleTypeTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModuleTypeTagAvailable indicates an expected call of DeleteModuleTypeTagAvailable.
func (mr *MockStoreMockRecorder) DeleteModuleTypeTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModuleTypeTagAvailable", reflect.TypeOf((*MockStore)(nil).DeleteModuleTypeTagAvailable), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockStore) DeletePost(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockStoreMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockStore)(nil).DeletePost), arg0, arg1)
}

// DeleteQuest mocks base method.
func (m *MockStore) DeleteQuest(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuest indicates an expected call of DeleteQuest.
func (mr *MockStoreMockRecorder) DeleteQuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuest", reflect.TypeOf((*MockStore)(nil).DeleteQuest), arg0, arg1)
}

// DeleteSystem mocks base method.
func (m *MockStore) DeleteSystem(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSystem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSystem indicates an expected call of DeleteSystem.
func (mr *MockStoreMockRecorder) DeleteSystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSystem", reflect.TypeOf((*MockStore)(nil).DeleteSystem), arg0, arg1)
}

// DeleteUserModule mocks base method.
func (m *MockStore) DeleteUserModule(arg0 context.Context, arg1 db.DeleteUserModuleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserModule", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserModule indicates an expected call of DeleteUserModule.
func (mr *MockStoreMockRecorder) DeleteUserModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserModule", reflect.TypeOf((*MockStore)(nil).DeleteUserModule), arg0, arg1)
}

// DeleteUserPasswordReset mocks base method.
func (m *MockStore) DeleteUserPasswordReset(arg0 context.Context, arg1 db.DeleteUserPasswordResetParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPasswordReset indicates an expected call of DeleteUserPasswordReset.
func (mr *MockStoreMockRecorder) DeleteUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPasswordReset", reflect.TypeOf((*MockStore)(nil).DeleteUserPasswordReset), arg0, arg1)
}

// DeleteWorld mocks base method.
func (m *MockStore) DeleteWorld(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorld", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorld indicates an expected call of DeleteWorld.
func (mr *MockStoreMockRecorder) DeleteWorld(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorld", reflect.TypeOf((*MockStore)(nil).DeleteWorld), arg0, arg1)
}

// EntityGroupContentChangePositions mocks base method.
func (m *MockStore) EntityGroupContentChangePositions(arg0 context.Context, arg1 db.EntityGroupContentChangePositionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EntityGroupContentChangePositions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EntityGroupContentChangePositions indicates an expected call of EntityGroupContentChangePositions.
func (mr *MockStoreMockRecorder) EntityGroupContentChangePositions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntityGroupContentChangePositions", reflect.TypeOf((*MockStore)(nil).EntityGroupContentChangePositions), arg0, arg1)
}

// GetAverageUserEvaluationsByType mocks base method.
func (m *MockStore) GetAverageUserEvaluationsByType(arg0 context.Context, arg1 db.GetAverageUserEvaluationsByTypeParams) ([]db.GetAverageUserEvaluationsByTypeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageUserEvaluationsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.GetAverageUserEvaluationsByTypeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageUserEvaluationsByType indicates an expected call of GetAverageUserEvaluationsByType.
func (mr *MockStoreMockRecorder) GetAverageUserEvaluationsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageUserEvaluationsByType", reflect.TypeOf((*MockStore)(nil).GetAverageUserEvaluationsByType), arg0, arg1)
}

// GetCharacterByID mocks base method.
func (m *MockStore) GetCharacterByID(arg0 context.Context, arg1 int32) (db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterByID", arg0, arg1)
	ret0, _ := ret[0].(db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterByID indicates an expected call of GetCharacterByID.
func (mr *MockStoreMockRecorder) GetCharacterByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterByID", reflect.TypeOf((*MockStore)(nil).GetCharacterByID), arg0, arg1)
}

// GetCharacters mocks base method.
func (m *MockStore) GetCharacters(arg0 context.Context, arg1 db.GetCharactersParams) ([]db.ViewCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacters", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacters indicates an expected call of GetCharacters.
func (mr *MockStoreMockRecorder) GetCharacters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacters", reflect.TypeOf((*MockStore)(nil).GetCharacters), arg0, arg1)
}

// GetCharactersByIDs mocks base method.
func (m *MockStore) GetCharactersByIDs(arg0 context.Context, arg1 []int32) ([]db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharactersByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharactersByIDs indicates an expected call of GetCharactersByIDs.
func (mr *MockStoreMockRecorder) GetCharactersByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharactersByIDs", reflect.TypeOf((*MockStore)(nil).GetCharactersByIDs), arg0, arg1)
}

// GetCharactersCount mocks base method.
func (m *MockStore) GetCharactersCount(arg0 context.Context, arg1 db.GetCharactersCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharactersCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharactersCount indicates an expected call of GetCharactersCount.
func (mr *MockStoreMockRecorder) GetCharactersCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharactersCount", reflect.TypeOf((*MockStore)(nil).GetCharactersCount), arg0, arg1)
}

// GetDefaultMapPinTypeForMap mocks base method.
func (m *MockStore) GetDefaultMapPinTypeForMap(arg0 context.Context, arg1 sql.NullInt32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultMapPinTypeForMap", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultMapPinTypeForMap indicates an expected call of GetDefaultMapPinTypeForMap.
func (mr *MockStoreMockRecorder) GetDefaultMapPinTypeForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultMapPinTypeForMap", reflect.TypeOf((*MockStore)(nil).GetDefaultMapPinTypeForMap), arg0, arg1)
}

// GetDefaultMapPinTypeForModule mocks base method.
func (m *MockStore) GetDefaultMapPinTypeForModule(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultMapPinTypeForModule", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultMapPinTypeForModule indicates an expected call of GetDefaultMapPinTypeForModule.
func (mr *MockStoreMockRecorder) GetDefaultMapPinTypeForModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultMapPinTypeForModule", reflect.TypeOf((*MockStore)(nil).GetDefaultMapPinTypeForModule), arg0, arg1)
}

// GetEntities mocks base method.
func (m *MockStore) GetEntities(arg0 context.Context, arg1 db.GetEntitiesParams) (db.ViewEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntities", arg0, arg1)
	ret0, _ := ret[0].(db.ViewEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntities indicates an expected call of GetEntities.
func (mr *MockStoreMockRecorder) GetEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntities", reflect.TypeOf((*MockStore)(nil).GetEntities), arg0, arg1)
}

// GetEntitiesByIDs mocks base method.
func (m *MockStore) GetEntitiesByIDs(arg0 context.Context, arg1 []int32) ([]db.ViewEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntitiesByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntitiesByIDs indicates an expected call of GetEntitiesByIDs.
func (mr *MockStoreMockRecorder) GetEntitiesByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntitiesByIDs", reflect.TypeOf((*MockStore)(nil).GetEntitiesByIDs), arg0, arg1)
}

// GetEntityByID mocks base method.
func (m *MockStore) GetEntityByID(arg0 context.Context, arg1 int32) (db.ViewEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByID", arg0, arg1)
	ret0, _ := ret[0].(db.ViewEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByID indicates an expected call of GetEntityByID.
func (mr *MockStoreMockRecorder) GetEntityByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByID", reflect.TypeOf((*MockStore)(nil).GetEntityByID), arg0, arg1)
}

// GetEntityByImageId mocks base method.
func (m *MockStore) GetEntityByImageId(arg0 context.Context, arg1 sql.NullInt32) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByImageId", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByImageId indicates an expected call of GetEntityByImageId.
func (mr *MockStoreMockRecorder) GetEntityByImageId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByImageId", reflect.TypeOf((*MockStore)(nil).GetEntityByImageId), arg0, arg1)
}

// GetEntityByLocationId mocks base method.
func (m *MockStore) GetEntityByLocationId(arg0 context.Context, arg1 sql.NullInt32) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByLocationId", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByLocationId indicates an expected call of GetEntityByLocationId.
func (mr *MockStoreMockRecorder) GetEntityByLocationId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByLocationId", reflect.TypeOf((*MockStore)(nil).GetEntityByLocationId), arg0, arg1)
}

// GetEntityByMapId mocks base method.
func (m *MockStore) GetEntityByMapId(arg0 context.Context, arg1 sql.NullInt32) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByMapId", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByMapId indicates an expected call of GetEntityByMapId.
func (mr *MockStoreMockRecorder) GetEntityByMapId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByMapId", reflect.TypeOf((*MockStore)(nil).GetEntityByMapId), arg0, arg1)
}

// GetEntityByPostId mocks base method.
func (m *MockStore) GetEntityByPostId(arg0 context.Context, arg1 sql.NullInt32) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityByPostId", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityByPostId indicates an expected call of GetEntityByPostId.
func (mr *MockStoreMockRecorder) GetEntityByPostId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityByPostId", reflect.TypeOf((*MockStore)(nil).GetEntityByPostId), arg0, arg1)
}

// GetEntityGroupByID mocks base method.
func (m *MockStore) GetEntityGroupByID(arg0 context.Context, arg1 int32) (db.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupByID", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupByID indicates an expected call of GetEntityGroupByID.
func (mr *MockStoreMockRecorder) GetEntityGroupByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupByID", reflect.TypeOf((*MockStore)(nil).GetEntityGroupByID), arg0, arg1)
}

// GetEntityGroupContentByID mocks base method.
func (m *MockStore) GetEntityGroupContentByID(arg0 context.Context, arg1 int32) (db.EntityGroupContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupContentByID", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroupContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupContentByID indicates an expected call of GetEntityGroupContentByID.
func (mr *MockStoreMockRecorder) GetEntityGroupContentByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupContentByID", reflect.TypeOf((*MockStore)(nil).GetEntityGroupContentByID), arg0, arg1)
}

// GetEntityGroupContentCount mocks base method.
func (m *MockStore) GetEntityGroupContentCount(arg0 context.Context, arg1 int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupContentCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupContentCount indicates an expected call of GetEntityGroupContentCount.
func (mr *MockStoreMockRecorder) GetEntityGroupContentCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupContentCount", reflect.TypeOf((*MockStore)(nil).GetEntityGroupContentCount), arg0, arg1)
}

// GetEntityGroupContents mocks base method.
func (m *MockStore) GetEntityGroupContents(arg0 context.Context, arg1 int32) ([]db.GetEntityGroupContentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupContents", arg0, arg1)
	ret0, _ := ret[0].([]db.GetEntityGroupContentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupContents indicates an expected call of GetEntityGroupContents.
func (mr *MockStoreMockRecorder) GetEntityGroupContents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupContents", reflect.TypeOf((*MockStore)(nil).GetEntityGroupContents), arg0, arg1)
}

// GetEntityGroupsByIDs mocks base method.
func (m *MockStore) GetEntityGroupsByIDs(arg0 context.Context, arg1 []int32) ([]db.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityGroupsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityGroupsByIDs indicates an expected call of GetEntityGroupsByIDs.
func (mr *MockStoreMockRecorder) GetEntityGroupsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityGroupsByIDs", reflect.TypeOf((*MockStore)(nil).GetEntityGroupsByIDs), arg0, arg1)
}

// GetEntityIDsOfGroup mocks base method.
func (m *MockStore) GetEntityIDsOfGroup(arg0 context.Context, arg1 int32) (db.GetEntityIDsOfGroupRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityIDsOfGroup", arg0, arg1)
	ret0, _ := ret[0].(db.GetEntityIDsOfGroupRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityIDsOfGroup indicates an expected call of GetEntityIDsOfGroup.
func (mr *MockStoreMockRecorder) GetEntityIDsOfGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityIDsOfGroup", reflect.TypeOf((*MockStore)(nil).GetEntityIDsOfGroup), arg0, arg1)
}

// GetEntityModuleAdmin mocks base method.
func (m *MockStore) GetEntityModuleAdmin(arg0 context.Context, arg1 db.GetEntityModuleAdminParams) (db.ViewModuleAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityModuleAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.ViewModuleAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntityModuleAdmin indicates an expected call of GetEntityModuleAdmin.
func (mr *MockStoreMockRecorder) GetEntityModuleAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityModuleAdmin", reflect.TypeOf((*MockStore)(nil).GetEntityModuleAdmin), arg0, arg1)
}

// GetEvaluationById mocks base method.
func (m *MockStore) GetEvaluationById(arg0 context.Context, arg1 int32) (db.Evaluation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationById", arg0, arg1)
	ret0, _ := ret[0].(db.Evaluation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationById indicates an expected call of GetEvaluationById.
func (mr *MockStoreMockRecorder) GetEvaluationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationById", reflect.TypeOf((*MockStore)(nil).GetEvaluationById), arg0, arg1)
}

// GetEvaluationVoteByEvaluationIdUserIdAndVoter mocks base method.
func (m *MockStore) GetEvaluationVoteByEvaluationIdUserIdAndVoter(arg0 context.Context, arg1 db.GetEvaluationVoteByEvaluationIdUserIdAndVoterParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVoteByEvaluationIdUserIdAndVoter", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVoteByEvaluationIdUserIdAndVoter indicates an expected call of GetEvaluationVoteByEvaluationIdUserIdAndVoter.
func (mr *MockStoreMockRecorder) GetEvaluationVoteByEvaluationIdUserIdAndVoter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVoteByEvaluationIdUserIdAndVoter", reflect.TypeOf((*MockStore)(nil).GetEvaluationVoteByEvaluationIdUserIdAndVoter), arg0, arg1)
}

// GetEvaluationVotesByUserId mocks base method.
func (m *MockStore) GetEvaluationVotesByUserId(arg0 context.Context, arg1 int32) ([]db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVotesByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVotesByUserId indicates an expected call of GetEvaluationVotesByUserId.
func (mr *MockStoreMockRecorder) GetEvaluationVotesByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVotesByUserId", reflect.TypeOf((*MockStore)(nil).GetEvaluationVotesByUserId), arg0, arg1)
}

// GetEvaluationVotesByUserIdAndVoter mocks base method.
func (m *MockStore) GetEvaluationVotesByUserIdAndVoter(arg0 context.Context, arg1 db.GetEvaluationVotesByUserIdAndVoterParams) ([]db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationVotesByUserIdAndVoter", arg0, arg1)
	ret0, _ := ret[0].([]db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationVotesByUserIdAndVoter indicates an expected call of GetEvaluationVotesByUserIdAndVoter.
func (mr *MockStoreMockRecorder) GetEvaluationVotesByUserIdAndVoter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationVotesByUserIdAndVoter", reflect.TypeOf((*MockStore)(nil).GetEvaluationVotesByUserIdAndVoter), arg0, arg1)
}

// GetEvaluationsByType mocks base method.
func (m *MockStore) GetEvaluationsByType(arg0 context.Context, arg1 db.EvaluationType) ([]db.Evaluation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationsByType", arg0, arg1)
	ret0, _ := ret[0].([]db.Evaluation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationsByType indicates an expected call of GetEvaluationsByType.
func (mr *MockStoreMockRecorder) GetEvaluationsByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationsByType", reflect.TypeOf((*MockStore)(nil).GetEvaluationsByType), arg0, arg1)
}

// GetImageByGUID mocks base method.
func (m *MockStore) GetImageByGUID(arg0 context.Context, arg1 uuid.NullUUID) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByGUID", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByGUID indicates an expected call of GetImageByGUID.
func (mr *MockStoreMockRecorder) GetImageByGUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByGUID", reflect.TypeOf((*MockStore)(nil).GetImageByGUID), arg0, arg1)
}

// GetImageById mocks base method.
func (m *MockStore) GetImageById(arg0 context.Context, arg1 int32) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageById", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageById indicates an expected call of GetImageById.
func (mr *MockStoreMockRecorder) GetImageById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageById", reflect.TypeOf((*MockStore)(nil).GetImageById), arg0, arg1)
}

// GetImageTypeById mocks base method.
func (m *MockStore) GetImageTypeById(arg0 context.Context, arg1 int32) (db.ImageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageTypeById", arg0, arg1)
	ret0, _ := ret[0].(db.ImageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageTypeById indicates an expected call of GetImageTypeById.
func (mr *MockStoreMockRecorder) GetImageTypeById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageTypeById", reflect.TypeOf((*MockStore)(nil).GetImageTypeById), arg0, arg1)
}

// GetImageTypeByName mocks base method.
func (m *MockStore) GetImageTypeByName(arg0 context.Context, arg1 string) (db.ImageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageTypeByName", arg0, arg1)
	ret0, _ := ret[0].(db.ImageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageTypeByName indicates an expected call of GetImageTypeByName.
func (mr *MockStoreMockRecorder) GetImageTypeByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageTypeByName", reflect.TypeOf((*MockStore)(nil).GetImageTypeByName), arg0, arg1)
}

// GetImages mocks base method.
func (m *MockStore) GetImages(arg0 context.Context, arg1 db.GetImagesParams) ([]db.GetImagesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages", arg0, arg1)
	ret0, _ := ret[0].([]db.GetImagesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockStoreMockRecorder) GetImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockStore)(nil).GetImages), arg0, arg1)
}

// GetImagesByIDs mocks base method.
func (m *MockStore) GetImagesByIDs(arg0 context.Context, arg1 []int32) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByIDs indicates an expected call of GetImagesByIDs.
func (mr *MockStoreMockRecorder) GetImagesByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByIDs", reflect.TypeOf((*MockStore)(nil).GetImagesByIDs), arg0, arg1)
}

// GetImagesByImageTypeId mocks base method.
func (m *MockStore) GetImagesByImageTypeId(arg0 context.Context, arg1 sql.NullInt32) ([]db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByImageTypeId", arg0, arg1)
	ret0, _ := ret[0].([]db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByImageTypeId indicates an expected call of GetImagesByImageTypeId.
func (mr *MockStoreMockRecorder) GetImagesByImageTypeId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByImageTypeId", reflect.TypeOf((*MockStore)(nil).GetImagesByImageTypeId), arg0, arg1)
}

// GetLocationById mocks base method.
func (m *MockStore) GetLocationById(arg0 context.Context, arg1 int32) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationById", arg0, arg1)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationById indicates an expected call of GetLocationById.
func (mr *MockStoreMockRecorder) GetLocationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationById", reflect.TypeOf((*MockStore)(nil).GetLocationById), arg0, arg1)
}

// GetLocations mocks base method.
func (m *MockStore) GetLocations(arg0 context.Context, arg1 db.GetLocationsParams) ([]db.GetLocationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocations", arg0, arg1)
	ret0, _ := ret[0].([]db.GetLocationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocations indicates an expected call of GetLocations.
func (mr *MockStoreMockRecorder) GetLocations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocations", reflect.TypeOf((*MockStore)(nil).GetLocations), arg0, arg1)
}

// GetLocationsByIDs mocks base method.
func (m *MockStore) GetLocationsByIDs(arg0 context.Context, arg1 []int32) ([]db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationsByIDs indicates an expected call of GetLocationsByIDs.
func (mr *MockStoreMockRecorder) GetLocationsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationsByIDs", reflect.TypeOf((*MockStore)(nil).GetLocationsByIDs), arg0, arg1)
}

// GetLocationsByModule mocks base method.
func (m *MockStore) GetLocationsByModule(arg0 context.Context, arg1 int32) ([]db.ViewLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationsByModule", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationsByModule indicates an expected call of GetLocationsByModule.
func (mr *MockStoreMockRecorder) GetLocationsByModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationsByModule", reflect.TypeOf((*MockStore)(nil).GetLocationsByModule), arg0, arg1)
}

// GetMapAssignments mocks base method.
func (m *MockStore) GetMapAssignments(arg0 context.Context, arg1 sql.NullInt32) (db.GetMapAssignmentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapAssignments", arg0, arg1)
	ret0, _ := ret[0].(db.GetMapAssignmentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapAssignments indicates an expected call of GetMapAssignments.
func (mr *MockStoreMockRecorder) GetMapAssignments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapAssignments", reflect.TypeOf((*MockStore)(nil).GetMapAssignments), arg0, arg1)
}

// GetMapById mocks base method.
func (m *MockStore) GetMapById(arg0 context.Context, arg1 int32) (db.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapById", arg0, arg1)
	ret0, _ := ret[0].(db.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapById indicates an expected call of GetMapById.
func (mr *MockStoreMockRecorder) GetMapById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapById", reflect.TypeOf((*MockStore)(nil).GetMapById), arg0, arg1)
}

// GetMapLayerByID mocks base method.
func (m *MockStore) GetMapLayerByID(arg0 context.Context, arg1 int32) (db.ViewMapLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapLayerByID", arg0, arg1)
	ret0, _ := ret[0].(db.ViewMapLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapLayerByID indicates an expected call of GetMapLayerByID.
func (mr *MockStoreMockRecorder) GetMapLayerByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapLayerByID", reflect.TypeOf((*MockStore)(nil).GetMapLayerByID), arg0, arg1)
}

// GetMapLayers mocks base method.
func (m *MockStore) GetMapLayers(arg0 context.Context, arg1 int32) ([]db.ViewMapLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapLayers", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewMapLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapLayers indicates an expected call of GetMapLayers.
func (mr *MockStoreMockRecorder) GetMapLayers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapLayers", reflect.TypeOf((*MockStore)(nil).GetMapLayers), arg0, arg1)
}

// GetMapPinByID mocks base method.
func (m *MockStore) GetMapPinByID(arg0 context.Context, arg1 int32) (db.ViewMapPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPinByID", arg0, arg1)
	ret0, _ := ret[0].(db.ViewMapPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPinByID indicates an expected call of GetMapPinByID.
func (mr *MockStoreMockRecorder) GetMapPinByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPinByID", reflect.TypeOf((*MockStore)(nil).GetMapPinByID), arg0, arg1)
}

// GetMapPinTypeGroupsForModule mocks base method.
func (m *MockStore) GetMapPinTypeGroupsForModule(arg0 context.Context, arg1 int32) ([]db.MapPinTypeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPinTypeGroupsForModule", arg0, arg1)
	ret0, _ := ret[0].([]db.MapPinTypeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPinTypeGroupsForModule indicates an expected call of GetMapPinTypeGroupsForModule.
func (mr *MockStoreMockRecorder) GetMapPinTypeGroupsForModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPinTypeGroupsForModule", reflect.TypeOf((*MockStore)(nil).GetMapPinTypeGroupsForModule), arg0, arg1)
}

// GetMapPinTypesForMap mocks base method.
func (m *MockStore) GetMapPinTypesForMap(arg0 context.Context, arg1 sql.NullInt32) ([]db.MapPinType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPinTypesForMap", arg0, arg1)
	ret0, _ := ret[0].([]db.MapPinType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPinTypesForMap indicates an expected call of GetMapPinTypesForMap.
func (mr *MockStoreMockRecorder) GetMapPinTypesForMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPinTypesForMap", reflect.TypeOf((*MockStore)(nil).GetMapPinTypesForMap), arg0, arg1)
}

// GetMapPinTypesForModule mocks base method.
func (m *MockStore) GetMapPinTypesForModule(arg0 context.Context, arg1 int32) ([]db.MapPinType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPinTypesForModule", arg0, arg1)
	ret0, _ := ret[0].([]db.MapPinType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPinTypesForModule indicates an expected call of GetMapPinTypesForModule.
func (mr *MockStoreMockRecorder) GetMapPinTypesForModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPinTypesForModule", reflect.TypeOf((*MockStore)(nil).GetMapPinTypesForModule), arg0, arg1)
}

// GetMapPins mocks base method.
func (m *MockStore) GetMapPins(arg0 context.Context, arg1 int32) ([]db.ViewMapPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapPins", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewMapPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapPins indicates an expected call of GetMapPins.
func (mr *MockStoreMockRecorder) GetMapPins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapPins", reflect.TypeOf((*MockStore)(nil).GetMapPins), arg0, arg1)
}

// GetMaps mocks base method.
func (m *MockStore) GetMaps(arg0 context.Context, arg1 db.GetMapsParams) ([]db.GetMapsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaps", arg0, arg1)
	ret0, _ := ret[0].([]db.GetMapsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaps indicates an expected call of GetMaps.
func (mr *MockStoreMockRecorder) GetMaps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaps", reflect.TypeOf((*MockStore)(nil).GetMaps), arg0, arg1)
}

// GetMapsByIDs mocks base method.
func (m *MockStore) GetMapsByIDs(arg0 context.Context, arg1 []int32) ([]db.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapsByIDs indicates an expected call of GetMapsByIDs.
func (mr *MockStoreMockRecorder) GetMapsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapsByIDs", reflect.TypeOf((*MockStore)(nil).GetMapsByIDs), arg0, arg1)
}

// GetMaxMapLayerPosition mocks base method.
func (m *MockStore) GetMaxMapLayerPosition(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxMapLayerPosition", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxMapLayerPosition indicates an expected call of GetMaxMapLayerPosition.
func (mr *MockStoreMockRecorder) GetMaxMapLayerPosition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxMapLayerPosition", reflect.TypeOf((*MockStore)(nil).GetMaxMapLayerPosition), arg0, arg1)
}

// GetMenu mocks base method.
func (m *MockStore) GetMenu(arg0 context.Context, arg1 int32) (db.ViewMenu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenu", arg0, arg1)
	ret0, _ := ret[0].(db.ViewMenu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenu indicates an expected call of GetMenu.
func (mr *MockStoreMockRecorder) GetMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenu", reflect.TypeOf((*MockStore)(nil).GetMenu), arg0, arg1)
}

// GetMenuIdOfEntityGroup mocks base method.
func (m *MockStore) GetMenuIdOfEntityGroup(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuIdOfEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuIdOfEntityGroup indicates an expected call of GetMenuIdOfEntityGroup.
func (mr *MockStoreMockRecorder) GetMenuIdOfEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuIdOfEntityGroup", reflect.TypeOf((*MockStore)(nil).GetMenuIdOfEntityGroup), arg0, arg1)
}

// GetMenuItemById mocks base method.
func (m *MockStore) GetMenuItemById(arg0 context.Context, arg1 int32) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItemById", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItemById indicates an expected call of GetMenuItemById.
func (mr *MockStoreMockRecorder) GetMenuItemById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItemById", reflect.TypeOf((*MockStore)(nil).GetMenuItemById), arg0, arg1)
}

// GetMenuItems mocks base method.
func (m *MockStore) GetMenuItems(arg0 context.Context, arg1 int32) ([]db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMenuItems", arg0, arg1)
	ret0, _ := ret[0].([]db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMenuItems indicates an expected call of GetMenuItems.
func (mr *MockStoreMockRecorder) GetMenuItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMenuItems", reflect.TypeOf((*MockStore)(nil).GetMenuItems), arg0, arg1)
}

// GetModule mocks base method.
func (m *MockStore) GetModule(arg0 context.Context, arg1 db.GetModuleParams) (db.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModule", arg0, arg1)
	ret0, _ := ret[0].(db.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModule indicates an expected call of GetModule.
func (mr *MockStoreMockRecorder) GetModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModule", reflect.TypeOf((*MockStore)(nil).GetModule), arg0, arg1)
}

// GetModuleAdmin mocks base method.
func (m *MockStore) GetModuleAdmin(arg0 context.Context, arg1 db.GetModuleAdminParams) (db.ViewModuleAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.ViewModuleAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleAdmin indicates an expected call of GetModuleAdmin.
func (mr *MockStoreMockRecorder) GetModuleAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAdmin", reflect.TypeOf((*MockStore)(nil).GetModuleAdmin), arg0, arg1)
}

// GetModuleAdminByMenuId mocks base method.
func (m *MockStore) GetModuleAdminByMenuId(arg0 context.Context, arg1 db.GetModuleAdminByMenuIdParams) (db.ViewModuleAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAdminByMenuId", arg0, arg1)
	ret0, _ := ret[0].(db.ViewModuleAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleAdminByMenuId indicates an expected call of GetModuleAdminByMenuId.
func (mr *MockStoreMockRecorder) GetModuleAdminByMenuId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAdminByMenuId", reflect.TypeOf((*MockStore)(nil).GetModuleAdminByMenuId), arg0, arg1)
}

// GetModuleAdmins mocks base method.
func (m *MockStore) GetModuleAdmins(arg0 context.Context, arg1 int32) ([]db.GetModuleAdminsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAdmins", arg0, arg1)
	ret0, _ := ret[0].([]db.GetModuleAdminsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleAdmins indicates an expected call of GetModuleAdmins.
func (mr *MockStoreMockRecorder) GetModuleAdmins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAdmins", reflect.TypeOf((*MockStore)(nil).GetModuleAdmins), arg0, arg1)
}

// GetModuleById mocks base method.
func (m *MockStore) GetModuleById(arg0 context.Context, arg1 int32) (db.ViewModule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleById", arg0, arg1)
	ret0, _ := ret[0].(db.ViewModule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleById indicates an expected call of GetModuleById.
func (mr *MockStoreMockRecorder) GetModuleById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleById", reflect.TypeOf((*MockStore)(nil).GetModuleById), arg0, arg1)
}

// GetModuleEntityTagsAvailable mocks base method.
func (m *MockStore) GetModuleEntityTagsAvailable(arg0 context.Context, arg1 int32) ([]db.ModuleEntityTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleEntityTagsAvailable", arg0, arg1)
	ret0, _ := ret[0].([]db.ModuleEntityTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleEntityTagsAvailable indicates an expected call of GetModuleEntityTagsAvailable.
func (mr *MockStoreMockRecorder) GetModuleEntityTagsAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleEntityTagsAvailable", reflect.TypeOf((*MockStore)(nil).GetModuleEntityTagsAvailable), arg0, arg1)
}

// GetModuleIdOfEntityGroup mocks base method.
func (m *MockStore) GetModuleIdOfEntityGroup(arg0 context.Context, arg1 int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleIdOfEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleIdOfEntityGroup indicates an expected call of GetModuleIdOfEntityGroup.
func (mr *MockStoreMockRecorder) GetModuleIdOfEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleIdOfEntityGroup", reflect.TypeOf((*MockStore)(nil).GetModuleIdOfEntityGroup), arg0, arg1)
}

// GetModuleTypeTagAvailable mocks base method.
func (m *MockStore) GetModuleTypeTagAvailable(arg0 context.Context, arg1 int32) (db.ViewModuleTypeTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleTypeTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(db.ViewModuleTypeTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleTypeTagAvailable indicates an expected call of GetModuleTypeTagAvailable.
func (mr *MockStoreMockRecorder) GetModuleTypeTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleTypeTagAvailable", reflect.TypeOf((*MockStore)(nil).GetModuleTypeTagAvailable), arg0, arg1)
}

// GetModuleTypeTagsAvailable mocks base method.
func (m *MockStore) GetModuleTypeTagsAvailable(arg0 context.Context, arg1 db.ModuleType) ([]db.ViewModuleTypeTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleTypeTagsAvailable", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewModuleTypeTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleTypeTagsAvailable indicates an expected call of GetModuleTypeTagsAvailable.
func (mr *MockStoreMockRecorder) GetModuleTypeTagsAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleTypeTagsAvailable", reflect.TypeOf((*MockStore)(nil).GetModuleTypeTagsAvailable), arg0, arg1)
}

// GetModulesByIDs mocks base method.
func (m *MockStore) GetModulesByIDs(arg0 context.Context, arg1 []int32) ([]db.ViewModule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModulesByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewModule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModulesByIDs indicates an expected call of GetModulesByIDs.
func (mr *MockStoreMockRecorder) GetModulesByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModulesByIDs", reflect.TypeOf((*MockStore)(nil).GetModulesByIDs), arg0, arg1)
}

// GetModulesOfAdmin mocks base method.
func (m *MockStore) GetModulesOfAdmin(arg0 context.Context, arg1 int32) ([]db.ViewModuleAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModulesOfAdmin", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewModuleAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModulesOfAdmin indicates an expected call of GetModulesOfAdmin.
func (mr *MockStoreMockRecorder) GetModulesOfAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModulesOfAdmin", reflect.TypeOf((*MockStore)(nil).GetModulesOfAdmin), arg0, arg1)
}

// GetPostById mocks base method.
func (m *MockStore) GetPostById(arg0 context.Context, arg1 int32) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockStoreMockRecorder) GetPostById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockStore)(nil).GetPostById), arg0, arg1)
}

// GetPostHistoryById mocks base method.
func (m *MockStore) GetPostHistoryById(arg0 context.Context, arg1 int32) (db.GetPostHistoryByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostHistoryById", arg0, arg1)
	ret0, _ := ret[0].(db.GetPostHistoryByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostHistoryById indicates an expected call of GetPostHistoryById.
func (mr *MockStoreMockRecorder) GetPostHistoryById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostHistoryById", reflect.TypeOf((*MockStore)(nil).GetPostHistoryById), arg0, arg1)
}

// GetPostHistoryByPostId mocks base method.
func (m *MockStore) GetPostHistoryByPostId(arg0 context.Context, arg1 int32) ([]db.GetPostHistoryByPostIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostHistoryByPostId", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPostHistoryByPostIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostHistoryByPostId indicates an expected call of GetPostHistoryByPostId.
func (mr *MockStoreMockRecorder) GetPostHistoryByPostId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostHistoryByPostId", reflect.TypeOf((*MockStore)(nil).GetPostHistoryByPostId), arg0, arg1)
}

// GetPosts mocks base method.
func (m *MockStore) GetPosts(arg0 context.Context, arg1 db.GetPostsParams) ([]db.GetPostsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", arg0, arg1)
	ret0, _ := ret[0].([]db.GetPostsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockStoreMockRecorder) GetPosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockStore)(nil).GetPosts), arg0, arg1)
}

// GetPostsByIDs mocks base method.
func (m *MockStore) GetPostsByIDs(arg0 context.Context, arg1 []int32) ([]db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByIDs indicates an expected call of GetPostsByIDs.
func (mr *MockStoreMockRecorder) GetPostsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByIDs", reflect.TypeOf((*MockStore)(nil).GetPostsByIDs), arg0, arg1)
}

// GetPostsByUserId mocks base method.
func (m *MockStore) GetPostsByUserId(arg0 context.Context, arg1 db.GetPostsByUserIdParams) ([]db.ViewPost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewPost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByUserId indicates an expected call of GetPostsByUserId.
func (mr *MockStoreMockRecorder) GetPostsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserId", reflect.TypeOf((*MockStore)(nil).GetPostsByUserId), arg0, arg1)
}

// GetQuestByID mocks base method.
func (m *MockStore) GetQuestByID(arg0 context.Context, arg1 int32) (db.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestByID", arg0, arg1)
	ret0, _ := ret[0].(db.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestByID indicates an expected call of GetQuestByID.
func (mr *MockStoreMockRecorder) GetQuestByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestByID", reflect.TypeOf((*MockStore)(nil).GetQuestByID), arg0, arg1)
}

// GetQuests mocks base method.
func (m *MockStore) GetQuests(arg0 context.Context, arg1 db.GetQuestsParams) ([]db.ViewQuest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuests", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewQuest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuests indicates an expected call of GetQuests.
func (mr *MockStoreMockRecorder) GetQuests(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuests", reflect.TypeOf((*MockStore)(nil).GetQuests), arg0, arg1)
}

// GetQuestsByIDs mocks base method.
func (m *MockStore) GetQuestsByIDs(arg0 context.Context, arg1 []int32) ([]db.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestsByIDs indicates an expected call of GetQuestsByIDs.
func (mr *MockStoreMockRecorder) GetQuestsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestsByIDs", reflect.TypeOf((*MockStore)(nil).GetQuestsByIDs), arg0, arg1)
}

// GetQuestsCount mocks base method.
func (m *MockStore) GetQuestsCount(arg0 context.Context, arg1 db.GetQuestsCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestsCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestsCount indicates an expected call of GetQuestsCount.
func (mr *MockStoreMockRecorder) GetQuestsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestsCount", reflect.TypeOf((*MockStore)(nil).GetQuestsCount), arg0, arg1)
}

// GetRecursiveEntities mocks base method.
func (m *MockStore) GetRecursiveEntities(arg0 context.Context, arg1 int32) ([]db.EntityGroupContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecursiveEntities", arg0, arg1)
	ret0, _ := ret[0].([]db.EntityGroupContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecursiveEntities indicates an expected call of GetRecursiveEntities.
func (mr *MockStoreMockRecorder) GetRecursiveEntities(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecursiveEntities", reflect.TypeOf((*MockStore)(nil).GetRecursiveEntities), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockStore) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockStoreMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockStore)(nil).GetSession), arg0, arg1)
}

// GetSystemByID mocks base method.
func (m *MockStore) GetSystemByID(arg0 context.Context, arg1 int32) (db.System, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemByID", arg0, arg1)
	ret0, _ := ret[0].(db.System)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemByID indicates an expected call of GetSystemByID.
func (mr *MockStoreMockRecorder) GetSystemByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemByID", reflect.TypeOf((*MockStore)(nil).GetSystemByID), arg0, arg1)
}

// GetSystems mocks base method.
func (m *MockStore) GetSystems(arg0 context.Context, arg1 db.GetSystemsParams) ([]db.ViewSystem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystems", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewSystem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystems indicates an expected call of GetSystems.
func (mr *MockStoreMockRecorder) GetSystems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystems", reflect.TypeOf((*MockStore)(nil).GetSystems), arg0, arg1)
}

// GetSystemsByIDs mocks base method.
func (m *MockStore) GetSystemsByIDs(arg0 context.Context, arg1 []int32) ([]db.System, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.System)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemsByIDs indicates an expected call of GetSystemsByIDs.
func (mr *MockStoreMockRecorder) GetSystemsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemsByIDs", reflect.TypeOf((*MockStore)(nil).GetSystemsByIDs), arg0, arg1)
}

// GetSystemsCount mocks base method.
func (m *MockStore) GetSystemsCount(arg0 context.Context, arg1 db.GetSystemsCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemsCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemsCount indicates an expected call of GetSystemsCount.
func (mr *MockStoreMockRecorder) GetSystemsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemsCount", reflect.TypeOf((*MockStore)(nil).GetSystemsCount), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.ViewUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.ViewUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockStore) GetUserById(arg0 context.Context, arg1 int32) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockStoreMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockStore)(nil).GetUserById), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockStore) GetUserByUsername(arg0 context.Context, arg1 string) (db.ViewUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.ViewUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockStoreMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStore)(nil).GetUserByUsername), arg0, arg1)
}

// GetUserModules mocks base method.
func (m *MockStore) GetUserModules(arg0 context.Context, arg1 int32) ([]db.GetUserModulesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserModules", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserModulesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserModules indicates an expected call of GetUserModules.
func (mr *MockStoreMockRecorder) GetUserModules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserModules", reflect.TypeOf((*MockStore)(nil).GetUserModules), arg0, arg1)
}

// GetUserPasswordReset mocks base method.
func (m *MockStore) GetUserPasswordReset(arg0 context.Context, arg1 string) (db.UserPasswordReset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPasswordReset", arg0, arg1)
	ret0, _ := ret[0].(db.UserPasswordReset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPasswordReset indicates an expected call of GetUserPasswordReset.
func (mr *MockStoreMockRecorder) GetUserPasswordReset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPasswordReset", reflect.TypeOf((*MockStore)(nil).GetUserPasswordReset), arg0, arg1)
}

// GetUserRoles mocks base method.
func (m *MockStore) GetUserRoles(arg0 context.Context, arg1 int32) ([]db.GetUserRolesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUserRolesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockStoreMockRecorder) GetUserRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockStore)(nil).GetUserRoles), arg0, arg1)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers(arg0 context.Context, arg1 db.GetUsersParams) ([]db.GetUsersRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.GetUsersRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers), arg0, arg1)
}

// GetUsersByIDs mocks base method.
func (m *MockStore) GetUsersByIDs(arg0 context.Context, arg1 []int32) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByIDs indicates an expected call of GetUsersByIDs.
func (mr *MockStoreMockRecorder) GetUsersByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByIDs", reflect.TypeOf((*MockStore)(nil).GetUsersByIDs), arg0, arg1)
}

// GetViewLocationById mocks base method.
func (m *MockStore) GetViewLocationById(arg0 context.Context, arg1 int32) (db.ViewLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewLocationById", arg0, arg1)
	ret0, _ := ret[0].(db.ViewLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViewLocationById indicates an expected call of GetViewLocationById.
func (mr *MockStoreMockRecorder) GetViewLocationById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewLocationById", reflect.TypeOf((*MockStore)(nil).GetViewLocationById), arg0, arg1)
}

// GetWorldByID mocks base method.
func (m *MockStore) GetWorldByID(arg0 context.Context, arg1 int32) (db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldByID", arg0, arg1)
	ret0, _ := ret[0].(db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldByID indicates an expected call of GetWorldByID.
func (mr *MockStoreMockRecorder) GetWorldByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldByID", reflect.TypeOf((*MockStore)(nil).GetWorldByID), arg0, arg1)
}

// GetWorlds mocks base method.
func (m *MockStore) GetWorlds(arg0 context.Context, arg1 db.GetWorldsParams) ([]db.ViewWorld, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorlds", arg0, arg1)
	ret0, _ := ret[0].([]db.ViewWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorlds indicates an expected call of GetWorlds.
func (mr *MockStoreMockRecorder) GetWorlds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorlds", reflect.TypeOf((*MockStore)(nil).GetWorlds), arg0, arg1)
}

// GetWorldsByIDs mocks base method.
func (m *MockStore) GetWorldsByIDs(arg0 context.Context, arg1 []int32) ([]db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldsByIDs", arg0, arg1)
	ret0, _ := ret[0].([]db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldsByIDs indicates an expected call of GetWorldsByIDs.
func (mr *MockStoreMockRecorder) GetWorldsByIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldsByIDs", reflect.TypeOf((*MockStore)(nil).GetWorldsByIDs), arg0, arg1)
}

// GetWorldsCount mocks base method.
func (m *MockStore) GetWorldsCount(arg0 context.Context, arg1 db.GetWorldsCountParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorldsCount", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorldsCount indicates an expected call of GetWorldsCount.
func (mr *MockStoreMockRecorder) GetWorldsCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorldsCount", reflect.TypeOf((*MockStore)(nil).GetWorldsCount), arg0, arg1)
}

// HasUserRole mocks base method.
func (m *MockStore) HasUserRole(arg0 context.Context, arg1 db.HasUserRoleParams) (db.HasUserRoleRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserRole", arg0, arg1)
	ret0, _ := ret[0].(db.HasUserRoleRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUserRole indicates an expected call of HasUserRole.
func (mr *MockStoreMockRecorder) HasUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserRole", reflect.TypeOf((*MockStore)(nil).HasUserRole), arg0, arg1)
}

// IncreaseMapLayerPositions mocks base method.
func (m *MockStore) IncreaseMapLayerPositions(arg0 context.Context, arg1 db.IncreaseMapLayerPositionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseMapLayerPositions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseMapLayerPositions indicates an expected call of IncreaseMapLayerPositions.
func (mr *MockStoreMockRecorder) IncreaseMapLayerPositions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseMapLayerPositions", reflect.TypeOf((*MockStore)(nil).IncreaseMapLayerPositions), arg0, arg1)
}

// InsertPostHistory mocks base method.
func (m *MockStore) InsertPostHistory(arg0 context.Context, arg1 int32) (db.PostHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPostHistory", arg0, arg1)
	ret0, _ := ret[0].(db.PostHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPostHistory indicates an expected call of InsertPostHistory.
func (mr *MockStoreMockRecorder) InsertPostHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPostHistory", reflect.TypeOf((*MockStore)(nil).InsertPostHistory), arg0, arg1)
}

// MenuItemChangePositions mocks base method.
func (m *MockStore) MenuItemChangePositions(arg0 context.Context, arg1 db.MenuItemChangePositionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuItemChangePositions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MenuItemChangePositions indicates an expected call of MenuItemChangePositions.
func (mr *MockStoreMockRecorder) MenuItemChangePositions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuItemChangePositions", reflect.TypeOf((*MockStore)(nil).MenuItemChangePositions), arg0, arg1)
}

// MenuItemMoveGroupUp mocks base method.
func (m *MockStore) MenuItemMoveGroupUp(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MenuItemMoveGroupUp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MenuItemMoveGroupUp indicates an expected call of MenuItemMoveGroupUp.
func (mr *MockStoreMockRecorder) MenuItemMoveGroupUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MenuItemMoveGroupUp", reflect.TypeOf((*MockStore)(nil).MenuItemMoveGroupUp), arg0, arg1)
}

// MoveMapLayer mocks base method.
func (m *MockStore) MoveMapLayer(arg0 context.Context, arg1 db.MoveMapLayerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveMapLayer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveMapLayer indicates an expected call of MoveMapLayer.
func (mr *MockStoreMockRecorder) MoveMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveMapLayer", reflect.TypeOf((*MockStore)(nil).MoveMapLayer), arg0, arg1)
}

// RemoveUserRole mocks base method.
func (m *MockStore) RemoveUserRole(arg0 context.Context, arg1 db.RemoveUserRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserRole indicates an expected call of RemoveUserRole.
func (mr *MockStoreMockRecorder) RemoveUserRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserRole", reflect.TypeOf((*MockStore)(nil).RemoveUserRole), arg0, arg1)
}

// ResetPasswordRequestTx mocks base method.
func (m *MockStore) ResetPasswordRequestTx(arg0 context.Context, arg1 db.ResetPasswordRequestTxParams) (db.ResetPasswordRequestTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordRequestTx", arg0, arg1)
	ret0, _ := ret[0].(db.ResetPasswordRequestTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordRequestTx indicates an expected call of ResetPasswordRequestTx.
func (mr *MockStoreMockRecorder) ResetPasswordRequestTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordRequestTx", reflect.TypeOf((*MockStore)(nil).ResetPasswordRequestTx), arg0, arg1)
}

// ResetPasswordVerifyTx mocks base method.
func (m *MockStore) ResetPasswordVerifyTx(arg0 context.Context, arg1 db.ResetPasswordVerifyTxParams) (db.ResetPasswordVerifyTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordVerifyTx", arg0, arg1)
	ret0, _ := ret[0].(db.ResetPasswordVerifyTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordVerifyTx indicates an expected call of ResetPasswordVerifyTx.
func (mr *MockStoreMockRecorder) ResetPasswordVerifyTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordVerifyTx", reflect.TypeOf((*MockStore)(nil).ResetPasswordVerifyTx), arg0, arg1)
}

// UpdateCharacter mocks base method.
func (m *MockStore) UpdateCharacter(arg0 context.Context, arg1 db.UpdateCharacterParams) (db.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCharacter indicates an expected call of UpdateCharacter.
func (mr *MockStoreMockRecorder) UpdateCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharacter", reflect.TypeOf((*MockStore)(nil).UpdateCharacter), arg0, arg1)
}

// UpdateEntity mocks base method.
func (m *MockStore) UpdateEntity(arg0 context.Context, arg1 db.UpdateEntityParams) (db.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", arg0, arg1)
	ret0, _ := ret[0].(db.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockStoreMockRecorder) UpdateEntity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockStore)(nil).UpdateEntity), arg0, arg1)
}

// UpdateEntityGroup mocks base method.
func (m *MockStore) UpdateEntityGroup(arg0 context.Context, arg1 db.UpdateEntityGroupParams) (db.EntityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityGroup", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityGroup indicates an expected call of UpdateEntityGroup.
func (mr *MockStoreMockRecorder) UpdateEntityGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityGroup", reflect.TypeOf((*MockStore)(nil).UpdateEntityGroup), arg0, arg1)
}

// UpdateEntityGroupContent mocks base method.
func (m *MockStore) UpdateEntityGroupContent(arg0 context.Context, arg1 db.UpdateEntityGroupContentParams) (db.EntityGroupContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityGroupContent", arg0, arg1)
	ret0, _ := ret[0].(db.EntityGroupContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEntityGroupContent indicates an expected call of UpdateEntityGroupContent.
func (mr *MockStoreMockRecorder) UpdateEntityGroupContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityGroupContent", reflect.TypeOf((*MockStore)(nil).UpdateEntityGroupContent), arg0, arg1)
}

// UpdateEvaluationVote mocks base method.
func (m *MockStore) UpdateEvaluationVote(arg0 context.Context, arg1 db.UpdateEvaluationVoteParams) (db.EvaluationVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluationVote", arg0, arg1)
	ret0, _ := ret[0].(db.EvaluationVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluationVote indicates an expected call of UpdateEvaluationVote.
func (mr *MockStoreMockRecorder) UpdateEvaluationVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationVote", reflect.TypeOf((*MockStore)(nil).UpdateEvaluationVote), arg0, arg1)
}

// UpdateImage mocks base method.
func (m *MockStore) UpdateImage(arg0 context.Context, arg1 db.UpdateImageParams) (db.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0, arg1)
	ret0, _ := ret[0].(db.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockStoreMockRecorder) UpdateImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockStore)(nil).UpdateImage), arg0, arg1)
}

// UpdateLocation mocks base method.
func (m *MockStore) UpdateLocation(arg0 context.Context, arg1 db.UpdateLocationParams) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", arg0, arg1)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockStoreMockRecorder) UpdateLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockStore)(nil).UpdateLocation), arg0, arg1)
}

// UpdateMap mocks base method.
func (m *MockStore) UpdateMap(arg0 context.Context, arg1 db.UpdateMapParams) (db.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMap", arg0, arg1)
	ret0, _ := ret[0].(db.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMap indicates an expected call of UpdateMap.
func (mr *MockStoreMockRecorder) UpdateMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMap", reflect.TypeOf((*MockStore)(nil).UpdateMap), arg0, arg1)
}

// UpdateMapLayer mocks base method.
func (m *MockStore) UpdateMapLayer(arg0 context.Context, arg1 db.UpdateMapLayerParams) (db.MapLayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapLayer", arg0, arg1)
	ret0, _ := ret[0].(db.MapLayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapLayer indicates an expected call of UpdateMapLayer.
func (mr *MockStoreMockRecorder) UpdateMapLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapLayer", reflect.TypeOf((*MockStore)(nil).UpdateMapLayer), arg0, arg1)
}

// UpdateMapPin mocks base method.
func (m *MockStore) UpdateMapPin(arg0 context.Context, arg1 db.UpdateMapPinParams) (db.MapPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapPin", arg0, arg1)
	ret0, _ := ret[0].(db.MapPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapPin indicates an expected call of UpdateMapPin.
func (mr *MockStoreMockRecorder) UpdateMapPin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapPin", reflect.TypeOf((*MockStore)(nil).UpdateMapPin), arg0, arg1)
}

// UpdateMapPinType mocks base method.
func (m *MockStore) UpdateMapPinType(arg0 context.Context, arg1 db.UpdateMapPinTypeParams) (db.MapPinType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapPinType", arg0, arg1)
	ret0, _ := ret[0].(db.MapPinType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapPinType indicates an expected call of UpdateMapPinType.
func (mr *MockStoreMockRecorder) UpdateMapPinType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapPinType", reflect.TypeOf((*MockStore)(nil).UpdateMapPinType), arg0, arg1)
}

// UpdateMapPinTypeGroup mocks base method.
func (m *MockStore) UpdateMapPinTypeGroup(arg0 context.Context, arg1 db.UpdateMapPinTypeGroupParams) (db.MapPinTypeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMapPinTypeGroup", arg0, arg1)
	ret0, _ := ret[0].(db.MapPinTypeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMapPinTypeGroup indicates an expected call of UpdateMapPinTypeGroup.
func (mr *MockStoreMockRecorder) UpdateMapPinTypeGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMapPinTypeGroup", reflect.TypeOf((*MockStore)(nil).UpdateMapPinTypeGroup), arg0, arg1)
}

// UpdateMenu mocks base method.
func (m *MockStore) UpdateMenu(arg0 context.Context, arg1 db.UpdateMenuParams) (db.Menu, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenu", arg0, arg1)
	ret0, _ := ret[0].(db.Menu)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMenu indicates an expected call of UpdateMenu.
func (mr *MockStoreMockRecorder) UpdateMenu(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenu", reflect.TypeOf((*MockStore)(nil).UpdateMenu), arg0, arg1)
}

// UpdateMenuItem mocks base method.
func (m *MockStore) UpdateMenuItem(arg0 context.Context, arg1 db.UpdateMenuItemParams) (db.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMenuItem", arg0, arg1)
	ret0, _ := ret[0].(db.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMenuItem indicates an expected call of UpdateMenuItem.
func (mr *MockStoreMockRecorder) UpdateMenuItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMenuItem", reflect.TypeOf((*MockStore)(nil).UpdateMenuItem), arg0, arg1)
}

// UpdateModule mocks base method.
func (m *MockStore) UpdateModule(arg0 context.Context, arg1 db.UpdateModuleParams) (db.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModule", arg0, arg1)
	ret0, _ := ret[0].(db.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModule indicates an expected call of UpdateModule.
func (mr *MockStoreMockRecorder) UpdateModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModule", reflect.TypeOf((*MockStore)(nil).UpdateModule), arg0, arg1)
}

// UpdateModuleAdmin mocks base method.
func (m *MockStore) UpdateModuleAdmin(arg0 context.Context, arg1 db.UpdateModuleAdminParams) (db.ModuleAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModuleAdmin", arg0, arg1)
	ret0, _ := ret[0].(db.ModuleAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModuleAdmin indicates an expected call of UpdateModuleAdmin.
func (mr *MockStoreMockRecorder) UpdateModuleAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModuleAdmin", reflect.TypeOf((*MockStore)(nil).UpdateModuleAdmin), arg0, arg1)
}

// UpdateModuleEntityTagAvailable mocks base method.
func (m *MockStore) UpdateModuleEntityTagAvailable(arg0 context.Context, arg1 db.UpdateModuleEntityTagAvailableParams) (db.ModuleEntityTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModuleEntityTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(db.ModuleEntityTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModuleEntityTagAvailable indicates an expected call of UpdateModuleEntityTagAvailable.
func (mr *MockStoreMockRecorder) UpdateModuleEntityTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModuleEntityTagAvailable", reflect.TypeOf((*MockStore)(nil).UpdateModuleEntityTagAvailable), arg0, arg1)
}

// UpdateModuleTypeTagAvailable mocks base method.
func (m *MockStore) UpdateModuleTypeTagAvailable(arg0 context.Context, arg1 db.UpdateModuleTypeTagAvailableParams) (db.ModuleTypeTagsAvailable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModuleTypeTagAvailable", arg0, arg1)
	ret0, _ := ret[0].(db.ModuleTypeTagsAvailable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateModuleTypeTagAvailable indicates an expected call of UpdateModuleTypeTagAvailable.
func (mr *MockStoreMockRecorder) UpdateModuleTypeTagAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModuleTypeTagAvailable", reflect.TypeOf((*MockStore)(nil).UpdateModuleTypeTagAvailable), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockStore) UpdatePost(arg0 context.Context, arg1 db.UpdatePostParams) (db.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockStoreMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockStore)(nil).UpdatePost), arg0, arg1)
}

// UpdateQuest mocks base method.
func (m *MockStore) UpdateQuest(arg0 context.Context, arg1 db.UpdateQuestParams) (db.Quest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuest", arg0, arg1)
	ret0, _ := ret[0].(db.Quest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateQuest indicates an expected call of UpdateQuest.
func (mr *MockStoreMockRecorder) UpdateQuest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuest", reflect.TypeOf((*MockStore)(nil).UpdateQuest), arg0, arg1)
}

// UpdateSystem mocks base method.
func (m *MockStore) UpdateSystem(arg0 context.Context, arg1 db.UpdateSystemParams) (db.System, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystem", arg0, arg1)
	ret0, _ := ret[0].(db.System)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystem indicates an expected call of UpdateSystem.
func (mr *MockStoreMockRecorder) UpdateSystem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystem", reflect.TypeOf((*MockStore)(nil).UpdateSystem), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockStore) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockStoreMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockStore)(nil).UpdateVerifyEmail), arg0, arg1)
}

// UpdateWorld mocks base method.
func (m *MockStore) UpdateWorld(arg0 context.Context, arg1 db.UpdateWorldParams) (db.World, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorld", arg0, arg1)
	ret0, _ := ret[0].(db.World)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorld indicates an expected call of UpdateWorld.
func (mr *MockStoreMockRecorder) UpdateWorld(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorld", reflect.TypeOf((*MockStore)(nil).UpdateWorld), arg0, arg1)
}

// UpsertUserModule mocks base method.
func (m *MockStore) UpsertUserModule(arg0 context.Context, arg1 db.UpsertUserModuleParams) (db.UserModule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserModule", arg0, arg1)
	ret0, _ := ret[0].(db.UserModule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertUserModule indicates an expected call of UpsertUserModule.
func (mr *MockStoreMockRecorder) UpsertUserModule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserModule", reflect.TypeOf((*MockStore)(nil).UpsertUserModule), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockStore) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockStoreMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockStore)(nil).VerifyEmailTx), arg0, arg1)
}
