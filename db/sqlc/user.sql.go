// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const addUserPasswordReset = `-- name: AddUserPasswordReset :one
INSERT INTO user_password_reset (user_id, code) VALUES ($1, $2) RETURNING user_id, code, expired_at
`

type AddUserPasswordResetParams struct {
	UserID int32  `json:"user_id"`
	Code   string `json:"code"`
}

func (q *Queries) AddUserPasswordReset(ctx context.Context, arg AddUserPasswordResetParams) (UserPasswordReset, error) {
	row := q.db.QueryRowContext(ctx, addUserPasswordReset, arg.UserID, arg.Code)
	var i UserPasswordReset
	err := row.Scan(&i.UserID, &i.Code, &i.ExpiredAt)
	return i, err
}

const addUserRole = `-- name: AddUserRole :one
INSERT INTO user_roles (user_id, role_id) VALUES ($1, $2) RETURNING user_id, role_id, created_at
`

type AddUserRoleParams struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) AddUserRole(ctx context.Context, arg AddUserRoleParams) (UserRole, error) {
	row := q.db.QueryRowContext(ctx, addUserRole, arg.UserID, arg.RoleID)
	var i UserRole
	err := row.Scan(&i.UserID, &i.RoleID, &i.CreatedAt)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users
(
    username,
    hashed_password,
    email
)
VALUES
    ($1, $2, $3)
RETURNING id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified, introduction_post_id
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.IntroductionPostID,
	)
	return i, err
}

const deleteUserModule = `-- name: DeleteUserModule :exec
DELETE FROM user_modules WHERE user_id = $1 AND module_id = $2
`

type DeleteUserModuleParams struct {
	UserID   int32 `json:"user_id"`
	ModuleID int32 `json:"module_id"`
}

func (q *Queries) DeleteUserModule(ctx context.Context, arg DeleteUserModuleParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserModule, arg.UserID, arg.ModuleID)
	return err
}

const deleteUserPasswordReset = `-- name: DeleteUserPasswordReset :exec
DELETE FROM user_password_reset WHERE user_id = $1 AND code = $2
`

type DeleteUserPasswordResetParams struct {
	UserID int32  `json:"user_id"`
	Code   string `json:"code"`
}

func (q *Queries) DeleteUserPasswordReset(ctx context.Context, arg DeleteUserPasswordResetParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserPasswordReset, arg.UserID, arg.Code)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified, introduction_post_id, avatar_image_id, avatar_image_url, avatar_image_guid, introduction_post_deleted_at FROM view_users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (ViewUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i ViewUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.IntroductionPostID,
		&i.AvatarImageID,
		&i.AvatarImageUrl,
		&i.AvatarImageGuid,
		&i.IntroductionPostDeletedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified, introduction_post_id FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.IntroductionPostID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified, introduction_post_id, avatar_image_id, avatar_image_url, avatar_image_guid, introduction_post_deleted_at FROM view_users WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (ViewUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i ViewUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.IntroductionPostID,
		&i.AvatarImageID,
		&i.AvatarImageUrl,
		&i.AvatarImageGuid,
		&i.IntroductionPostDeletedAt,
	)
	return i, err
}

const getUserModules = `-- name: GetUserModules :many
SELECT
    m.id, m.module_type, m.menu_id, m.header_img_id, m.thumbnail_img_id, m.avatar_img_id, m.world_id, m.system_id, m.character_id, m.quest_id, m.description_post_id,
    um.user_id,
    um.admin,
    um.favorite,
    um.following,
    um.entity_notifications
FROM
    user_modules um
    JOIN modules m ON um.module_id = m.id
WHERE
    user_id = $1
`

type GetUserModulesRow struct {
	ID                  int32         `json:"id"`
	ModuleType          ModuleType    `json:"module_type"`
	MenuID              int32         `json:"menu_id"`
	HeaderImgID         sql.NullInt32 `json:"header_img_id"`
	ThumbnailImgID      sql.NullInt32 `json:"thumbnail_img_id"`
	AvatarImgID         sql.NullInt32 `json:"avatar_img_id"`
	WorldID             sql.NullInt32 `json:"world_id"`
	SystemID            sql.NullInt32 `json:"system_id"`
	CharacterID         sql.NullInt32 `json:"character_id"`
	QuestID             sql.NullInt32 `json:"quest_id"`
	DescriptionPostID   int32         `json:"description_post_id"`
	UserID              int32         `json:"user_id"`
	Admin               bool          `json:"admin"`
	Favorite            bool          `json:"favorite"`
	Following           bool          `json:"following"`
	EntityNotifications []EntityType  `json:"entity_notifications"`
}

func (q *Queries) GetUserModules(ctx context.Context, userID int32) ([]GetUserModulesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserModules, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserModulesRow{}
	for rows.Next() {
		var i GetUserModulesRow
		if err := rows.Scan(
			&i.ID,
			&i.ModuleType,
			&i.MenuID,
			&i.HeaderImgID,
			&i.ThumbnailImgID,
			&i.AvatarImgID,
			&i.WorldID,
			&i.SystemID,
			&i.CharacterID,
			&i.QuestID,
			&i.DescriptionPostID,
			&i.UserID,
			&i.Admin,
			&i.Favorite,
			&i.Following,
			pq.Array(&i.EntityNotifications),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPasswordReset = `-- name: GetUserPasswordReset :one
SELECT user_id, code, expired_at FROM user_password_reset WHERE code = $1 AND expired_at > NOW() LIMIT 1
`

func (q *Queries) GetUserPasswordReset(ctx context.Context, code string) (UserPasswordReset, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordReset, code)
	var i UserPasswordReset
	err := row.Scan(&i.UserID, &i.Code, &i.ExpiredAt)
	return i, err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT
    ur.user_id, ur.role_id, ur.created_at,
    r.name AS role_name,
    r.description AS role_description
FROM
    user_roles ur
    JOIN roles r ON ur.role_id = r.id
WHERE user_id = $1
`

type GetUserRolesRow struct {
	UserID          int32     `json:"user_id"`
	RoleID          int32     `json:"role_id"`
	CreatedAt       time.Time `json:"created_at"`
	RoleName        string    `json:"role_name"`
	RoleDescription string    `json:"role_description"`
}

func (q *Queries) GetUserRoles(ctx context.Context, userID int32) ([]GetUserRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserRolesRow{}
	for rows.Next() {
		var i GetUserRolesRow
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.CreatedAt,
			&i.RoleName,
			&i.RoleDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT
    u.id, username, hashed_password, email, img_id, password_changed_at, u.created_at, is_email_verified, introduction_post_id, i.id, user_id, img_guid, image_type_id, name, url, base_url, i.created_at, width, height
FROM
    users AS u
    LEFT JOIN images i ON u.img_id = i.id
ORDER BY username
LIMIT $2
OFFSET $1
`

type GetUsersParams struct {
	PageOffset int32 `json:"page_offset"`
	PageLimit  int32 `json:"page_limit"`
}

type GetUsersRow struct {
	ID                 int32          `json:"id"`
	Username           string         `json:"username"`
	HashedPassword     string         `json:"hashed_password"`
	Email              string         `json:"email"`
	ImgID              sql.NullInt32  `json:"img_id"`
	PasswordChangedAt  time.Time      `json:"password_changed_at"`
	CreatedAt          time.Time      `json:"created_at"`
	IsEmailVerified    bool           `json:"is_email_verified"`
	IntroductionPostID sql.NullInt32  `json:"introduction_post_id"`
	ID_2               sql.NullInt32  `json:"id_2"`
	UserID             sql.NullInt32  `json:"user_id"`
	ImgGuid            uuid.NullUUID  `json:"img_guid"`
	ImageTypeID        sql.NullInt32  `json:"image_type_id"`
	Name               sql.NullString `json:"name"`
	Url                sql.NullString `json:"url"`
	BaseUrl            sql.NullString `json:"base_url"`
	CreatedAt_2        sql.NullTime   `json:"created_at_2"`
	Width              sql.NullInt32  `json:"width"`
	Height             sql.NullInt32  `json:"height"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.ImgID,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.IsEmailVerified,
			&i.IntroductionPostID,
			&i.ID_2,
			&i.UserID,
			&i.ImgGuid,
			&i.ImageTypeID,
			&i.Name,
			&i.Url,
			&i.BaseUrl,
			&i.CreatedAt_2,
			&i.Width,
			&i.Height,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByIDs = `-- name: GetUsersByIDs :many
SELECT id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified, introduction_post_id FROM users WHERE id = ANY($1::int[])
`

func (q *Queries) GetUsersByIDs(ctx context.Context, userIds []int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByIDs, pq.Array(userIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.ImgID,
			&i.PasswordChangedAt,
			&i.CreatedAt,
			&i.IsEmailVerified,
			&i.IntroductionPostID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasUserRole = `-- name: HasUserRole :one
SELECT
    user_id, role_id, created_at, id, name, description
FROM
    user_roles ur
    JOIN roles r on ur.role_id = r.id
WHERE user_id = $1 AND r.name = $2 LIMIT 1
`

type HasUserRoleParams struct {
	UserID int32  `json:"user_id"`
	Role   string `json:"role"`
}

type HasUserRoleRow struct {
	UserID      int32     `json:"user_id"`
	RoleID      int32     `json:"role_id"`
	CreatedAt   time.Time `json:"created_at"`
	ID          int32     `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) HasUserRole(ctx context.Context, arg HasUserRoleParams) (HasUserRoleRow, error) {
	row := q.db.QueryRowContext(ctx, hasUserRole, arg.UserID, arg.Role)
	var i HasUserRoleRow
	err := row.Scan(
		&i.UserID,
		&i.RoleID,
		&i.CreatedAt,
		&i.ID,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const removeUserRole = `-- name: RemoveUserRole :exec
DELETE FROM user_roles WHERE user_id = $1 AND role_id = $2
`

type RemoveUserRoleParams struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) RemoveUserRole(ctx context.Context, arg RemoveUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, removeUserRole, arg.UserID, arg.RoleID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    hashed_password = COALESCE($1, hashed_password),
    password_changed_at = COALESCE($2, password_changed_at),
    username = COALESCE($3, username),
    email = COALESCE($4, email),
    img_id = COALESCE($5, img_id),
    is_email_verified = COALESCE($6, is_email_verified),
    introduction_post_id = COALESCE($7, introduction_post_id)
WHERE
    id = $8
RETURNING id, username, hashed_password, email, img_id, password_changed_at, created_at, is_email_verified, introduction_post_id
`

type UpdateUserParams struct {
	HashedPassword     sql.NullString `json:"hashed_password"`
	PasswordChangedAt  sql.NullTime   `json:"password_changed_at"`
	Username           sql.NullString `json:"username"`
	Email              sql.NullString `json:"email"`
	ImgID              sql.NullInt32  `json:"img_id"`
	IsEmailVerified    sql.NullBool   `json:"is_email_verified"`
	IntroductionPostID sql.NullInt32  `json:"introduction_post_id"`
	ID                 int32          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.Username,
		arg.Email,
		arg.ImgID,
		arg.IsEmailVerified,
		arg.IntroductionPostID,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.ImgID,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.IsEmailVerified,
		&i.IntroductionPostID,
	)
	return i, err
}

const upsertUserModule = `-- name: UpsertUserModule :one
INSERT INTO user_modules (user_id, module_id, admin, favorite, following, entity_notifications)
VALUES ($1, $2, $3, $4, $5, $6::entity_type[])
ON CONFLICT (user_id, module_id)
    DO UPDATE SET
      admin = COALESCE(EXCLUDED.admin, user_modules.admin),
      favorite = COALESCE(EXCLUDED.favorite, user_modules.favorite),
      following = COALESCE(EXCLUDED.following, user_modules.following),
      entity_notifications = COALESCE(EXCLUDED.entity_notifications, user_modules.entity_notifications)
RETURNING user_id, module_id, admin, favorite, following, entity_notifications
`

type UpsertUserModuleParams struct {
	UserID              int32        `json:"user_id"`
	ModuleID            int32        `json:"module_id"`
	Admin               sql.NullBool `json:"admin"`
	Favorite            sql.NullBool `json:"favorite"`
	Following           sql.NullBool `json:"following"`
	EntityNotifications []EntityType `json:"entity_notifications"`
}

func (q *Queries) UpsertUserModule(ctx context.Context, arg UpsertUserModuleParams) (UserModule, error) {
	row := q.db.QueryRowContext(ctx, upsertUserModule,
		arg.UserID,
		arg.ModuleID,
		arg.Admin,
		arg.Favorite,
		arg.Following,
		pq.Array(arg.EntityNotifications),
	)
	var i UserModule
	err := row.Scan(
		&i.UserID,
		&i.ModuleID,
		&i.Admin,
		&i.Favorite,
		&i.Following,
		pq.Array(&i.EntityNotifications),
	)
	return i, err
}
