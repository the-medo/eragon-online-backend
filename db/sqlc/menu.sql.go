// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: menu.sql

package db

import (
	"context"
	"database/sql"
)

const createMenu = `-- name: CreateMenu :one
INSERT INTO menus (menu_code, menu_header_img_id)
VALUES ($1, $2)
RETURNING id, menu_code, menu_header_img_id
`

type CreateMenuParams struct {
	MenuCode        string        `json:"menu_code"`
	MenuHeaderImgID sql.NullInt32 `json:"menu_header_img_id"`
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, createMenu, arg.MenuCode, arg.MenuHeaderImgID)
	var i Menu
	err := row.Scan(&i.ID, &i.MenuCode, &i.MenuHeaderImgID)
	return i, err
}

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menu_items (menu_id, menu_item_code, name, position, is_main, description_post_id, entity_group_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, menu_id, menu_item_code, name, position, is_main, description_post_id, entity_group_id
`

type CreateMenuItemParams struct {
	MenuID            int32         `json:"menu_id"`
	MenuItemCode      string        `json:"menu_item_code"`
	Name              string        `json:"name"`
	Position          int32         `json:"position"`
	IsMain            sql.NullBool  `json:"is_main"`
	DescriptionPostID sql.NullInt32 `json:"description_post_id"`
	EntityGroupID     sql.NullInt32 `json:"entity_group_id"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, createMenuItem,
		arg.MenuID,
		arg.MenuItemCode,
		arg.Name,
		arg.Position,
		arg.IsMain,
		arg.DescriptionPostID,
		arg.EntityGroupID,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.MenuItemCode,
		&i.Name,
		&i.Position,
		&i.IsMain,
		&i.DescriptionPostID,
		&i.EntityGroupID,
	)
	return i, err
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM menus WHERE id = $1
`

func (q *Queries) DeleteMenu(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenu, id)
	return err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
CALL delete_menu_item($1)
`

func (q *Queries) DeleteMenuItem(ctx context.Context, menuItemID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenuItem, menuItemID)
	return err
}

const getMenu = `-- name: GetMenu :one
SELECT id, menu_code, menu_header_img_id, header_image_url FROM view_menus WHERE id = $1
`

func (q *Queries) GetMenu(ctx context.Context, id int32) (ViewMenu, error) {
	row := q.db.QueryRowContext(ctx, getMenu, id)
	var i ViewMenu
	err := row.Scan(
		&i.ID,
		&i.MenuCode,
		&i.MenuHeaderImgID,
		&i.HeaderImageUrl,
	)
	return i, err
}

const getMenuItemById = `-- name: GetMenuItemById :one
SELECT id, menu_id, menu_item_code, name, position, is_main, description_post_id, entity_group_id FROM menu_items WHERE id = $1
`

func (q *Queries) GetMenuItemById(ctx context.Context, id int32) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, getMenuItemById, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.MenuItemCode,
		&i.Name,
		&i.Position,
		&i.IsMain,
		&i.DescriptionPostID,
		&i.EntityGroupID,
	)
	return i, err
}

const getMenuItems = `-- name: GetMenuItems :many
SELECT id, menu_id, menu_item_code, name, position, is_main, description_post_id, entity_group_id FROM menu_items WHERE menu_id = $1
`

func (q *Queries) GetMenuItems(ctx context.Context, menuID int32) ([]MenuItem, error) {
	rows, err := q.db.QueryContext(ctx, getMenuItems, menuID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.MenuID,
			&i.MenuItemCode,
			&i.Name,
			&i.Position,
			&i.IsMain,
			&i.DescriptionPostID,
			&i.EntityGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecursiveEntities = `-- name: GetRecursiveEntities :many
SELECT id, entity_group_id, position, content_entity_id, content_entity_group_id FROM get_recursive_entities($1)
`

func (q *Queries) GetRecursiveEntities(ctx context.Context, entityGroupID int32) ([]EntityGroupContent, error) {
	rows, err := q.db.QueryContext(ctx, getRecursiveEntities, entityGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntityGroupContent{}
	for rows.Next() {
		var i EntityGroupContent
		if err := rows.Scan(
			&i.ID,
			&i.EntityGroupID,
			&i.Position,
			&i.ContentEntityID,
			&i.ContentEntityGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const menuItemChangePositions = `-- name: MenuItemChangePositions :exec
CALL move_menu_item($1, $2)
`

type MenuItemChangePositionsParams struct {
	MenuItemID     int32 `json:"menu_item_id"`
	TargetPosition int32 `json:"target_position"`
}

func (q *Queries) MenuItemChangePositions(ctx context.Context, arg MenuItemChangePositionsParams) error {
	_, err := q.db.ExecContext(ctx, menuItemChangePositions, arg.MenuItemID, arg.TargetPosition)
	return err
}

const menuItemMoveGroupUp = `-- name: MenuItemMoveGroupUp :exec
CALL move_group_up($1)
`

func (q *Queries) MenuItemMoveGroupUp(ctx context.Context, menuItemID int32) error {
	_, err := q.db.ExecContext(ctx, menuItemMoveGroupUp, menuItemID)
	return err
}

const updateMenu = `-- name: UpdateMenu :one
UPDATE menus
SET menu_code = COALESCE($1, menu_code),
    menu_header_img_id = COALESCE($2, menu_header_img_id)
WHERE menus.id = $3
RETURNING id, menu_code, menu_header_img_id
`

type UpdateMenuParams struct {
	MenuCode        sql.NullString `json:"menu_code"`
	MenuHeaderImgID sql.NullInt32  `json:"menu_header_img_id"`
	ID              int32          `json:"id"`
}

func (q *Queries) UpdateMenu(ctx context.Context, arg UpdateMenuParams) (Menu, error) {
	row := q.db.QueryRowContext(ctx, updateMenu, arg.MenuCode, arg.MenuHeaderImgID, arg.ID)
	var i Menu
	err := row.Scan(&i.ID, &i.MenuCode, &i.MenuHeaderImgID)
	return i, err
}

const updateMenuItem = `-- name: UpdateMenuItem :one
UPDATE menu_items
SET
    menu_item_code = COALESCE($1, menu_item_code),
    name = COALESCE($2, name),
    -- position = COALESCE(sqlc.narg(position), position),
    is_main = COALESCE($3, is_main),
    description_post_id = COALESCE($4, description_post_id),
    entity_group_id = COALESCE($5, entity_group_id)
WHERE id = $6
RETURNING id, menu_id, menu_item_code, name, position, is_main, description_post_id, entity_group_id
`

type UpdateMenuItemParams struct {
	MenuItemCode      sql.NullString `json:"menu_item_code"`
	Name              sql.NullString `json:"name"`
	IsMain            sql.NullBool   `json:"is_main"`
	DescriptionPostID sql.NullInt32  `json:"description_post_id"`
	EntityGroupID     sql.NullInt32  `json:"entity_group_id"`
	ID                int32          `json:"id"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, updateMenuItem,
		arg.MenuItemCode,
		arg.Name,
		arg.IsMain,
		arg.DescriptionPostID,
		arg.EntityGroupID,
		arg.ID,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.MenuID,
		&i.MenuItemCode,
		&i.Name,
		&i.Position,
		&i.IsMain,
		&i.DescriptionPostID,
		&i.EntityGroupID,
	)
	return i, err
}
