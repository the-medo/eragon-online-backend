// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: world.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createWorld = `-- name: CreateWorld :one
INSERT INTO worlds (
    name,
    based_on,
    short_description
) VALUES (
     $1, $2, $3
 ) RETURNING id, name, based_on, public, created_at, short_description
`

type CreateWorldParams struct {
	Name             string `json:"name"`
	BasedOn          string `json:"based_on"`
	ShortDescription string `json:"short_description"`
}

func (q *Queries) CreateWorld(ctx context.Context, arg CreateWorldParams) (World, error) {
	row := q.db.QueryRowContext(ctx, createWorld, arg.Name, arg.BasedOn, arg.ShortDescription)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BasedOn,
		&i.Public,
		&i.CreatedAt,
		&i.ShortDescription,
	)
	return i, err
}

const deleteWorld = `-- name: DeleteWorld :exec
DELETE FROM worlds WHERE id = $1
`

func (q *Queries) DeleteWorld(ctx context.Context, worldID int32) error {
	_, err := q.db.ExecContext(ctx, deleteWorld, worldID)
	return err
}

const getWorldByID = `-- name: GetWorldByID :one
SELECT id, name, based_on, public, created_at, short_description FROM worlds WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorldByID(ctx context.Context, worldID int32) (World, error) {
	row := q.db.QueryRowContext(ctx, getWorldByID, worldID)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BasedOn,
		&i.Public,
		&i.CreatedAt,
		&i.ShortDescription,
	)
	return i, err
}

const getWorlds = `-- name: GetWorlds :many
SELECT id, name, based_on, public, created_at, short_description, module_id, menu_id, header_img_id, thumbnail_img_id, avatar_img_id, tags FROM get_worlds($1::boolean, $2::integer[], $3::VARCHAR, 'DESC', $4, $5)
`

type GetWorldsParams struct {
	IsPublic   bool    `json:"is_public"`
	Tags       []int32 `json:"tags"`
	OrderBy    string  `json:"order_by"`
	PageLimit  int32   `json:"page_limit"`
	PageOffset int32   `json:"page_offset"`
}

func (q *Queries) GetWorlds(ctx context.Context, arg GetWorldsParams) ([]ViewWorld, error) {
	rows, err := q.db.QueryContext(ctx, getWorlds,
		arg.IsPublic,
		pq.Array(arg.Tags),
		arg.OrderBy,
		arg.PageLimit,
		arg.PageOffset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewWorld{}
	for rows.Next() {
		var i ViewWorld
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BasedOn,
			&i.Public,
			&i.CreatedAt,
			&i.ShortDescription,
			&i.ModuleID,
			&i.MenuID,
			&i.HeaderImgID,
			&i.ThumbnailImgID,
			&i.AvatarImgID,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldsByIDs = `-- name: GetWorldsByIDs :many
SELECT id, name, based_on, public, created_at, short_description FROM worlds WHERE id = ANY($1::int[])
`

func (q *Queries) GetWorldsByIDs(ctx context.Context, worldIds []int32) ([]World, error) {
	rows, err := q.db.QueryContext(ctx, getWorldsByIDs, pq.Array(worldIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []World{}
	for rows.Next() {
		var i World
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BasedOn,
			&i.Public,
			&i.CreatedAt,
			&i.ShortDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorldsCount = `-- name: GetWorldsCount :one
SELECT COUNT(*) FROM view_worlds
WHERE ($1::boolean IS NULL OR public = $1) AND
    (array_length($2::integer[], 1) IS NULL OR tags @> $2::integer[])
`

type GetWorldsCountParams struct {
	IsPublic bool    `json:"is_public"`
	Tags     []int32 `json:"tags"`
}

func (q *Queries) GetWorldsCount(ctx context.Context, arg GetWorldsCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getWorldsCount, arg.IsPublic, pq.Array(arg.Tags))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateWorld = `-- name: UpdateWorld :one
UPDATE worlds
SET
    name = COALESCE($1, name),
    based_on = COALESCE($2, based_on),
    public = COALESCE($3, public),
    short_description = COALESCE($4, short_description)
WHERE
    id = $5
RETURNING id, name, based_on, public, created_at, short_description
`

type UpdateWorldParams struct {
	Name             sql.NullString `json:"name"`
	BasedOn          sql.NullString `json:"based_on"`
	Public           sql.NullBool   `json:"public"`
	ShortDescription sql.NullString `json:"short_description"`
	WorldID          int32          `json:"world_id"`
}

func (q *Queries) UpdateWorld(ctx context.Context, arg UpdateWorldParams) (World, error) {
	row := q.db.QueryRowContext(ctx, updateWorld,
		arg.Name,
		arg.BasedOn,
		arg.Public,
		arg.ShortDescription,
		arg.WorldID,
	)
	var i World
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BasedOn,
		&i.Public,
		&i.CreatedAt,
		&i.ShortDescription,
	)
	return i, err
}
