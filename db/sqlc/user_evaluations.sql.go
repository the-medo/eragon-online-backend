// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user_evaluations.sql

package db

import (
	"context"
)

const createEvaluationVote = `-- name: CreateEvaluationVote :one
INSERT INTO evaluation_votes
(
    evaluation_id,
    user_id,
    user_id_voter,
    value
)
VALUES
    ($1, $2, $3, $4)
RETURNING evaluation_id, user_id, user_id_voter, value, created_at
`

type CreateEvaluationVoteParams struct {
	EvaluationID int32   `json:"evaluation_id"`
	UserID       int32   `json:"user_id"`
	UserIDVoter  int32   `json:"user_id_voter"`
	Value        float64 `json:"value"`
}

func (q *Queries) CreateEvaluationVote(ctx context.Context, arg CreateEvaluationVoteParams) (EvaluationVote, error) {
	row := q.db.QueryRowContext(ctx, createEvaluationVote,
		arg.EvaluationID,
		arg.UserID,
		arg.UserIDVoter,
		arg.Value,
	)
	var i EvaluationVote
	err := row.Scan(
		&i.EvaluationID,
		&i.UserID,
		&i.UserIDVoter,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEvaluationVote = `-- name: DeleteEvaluationVote :exec
DELETE FROM evaluation_votes WHERE evaluation_id = $1 AND user_id = $2 AND user_id_voter = $3
`

type DeleteEvaluationVoteParams struct {
	EvaluationID int32 `json:"evaluation_id"`
	UserID       int32 `json:"user_id"`
	UserIDVoter  int32 `json:"user_id_voter"`
}

func (q *Queries) DeleteEvaluationVote(ctx context.Context, arg DeleteEvaluationVoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteEvaluationVote, arg.EvaluationID, arg.UserID, arg.UserIDVoter)
	return err
}

const getAverageUserEvaluationsByType = `-- name: GetAverageUserEvaluationsByType :many
SELECT
    e.id AS evaluation_id,
    e.name,
    e.description,
    e.evaluation_type,
    AVG(COALESCE(ev.value, 0)) AS avg_value
FROM
    evaluations e
    LEFT JOIN evaluation_votes ev ON e.id = ev.evaluation_id AND ev.user_id = $1
WHERE
    e.evaluation_type = $2
GROUP BY
    e.id,
    e.name,
    e.description,
    e.evaluation_type
`

type GetAverageUserEvaluationsByTypeParams struct {
	UserID         int32          `json:"user_id"`
	EvaluationType EvaluationType `json:"evaluation_type"`
}

type GetAverageUserEvaluationsByTypeRow struct {
	EvaluationID   int32          `json:"evaluation_id"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	EvaluationType EvaluationType `json:"evaluation_type"`
	AvgValue       float64        `json:"avg_value"`
}

func (q *Queries) GetAverageUserEvaluationsByType(ctx context.Context, arg GetAverageUserEvaluationsByTypeParams) ([]GetAverageUserEvaluationsByTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getAverageUserEvaluationsByType, arg.UserID, arg.EvaluationType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAverageUserEvaluationsByTypeRow{}
	for rows.Next() {
		var i GetAverageUserEvaluationsByTypeRow
		if err := rows.Scan(
			&i.EvaluationID,
			&i.Name,
			&i.Description,
			&i.EvaluationType,
			&i.AvgValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvaluationById = `-- name: GetEvaluationById :one
SELECT id, name, description, evaluation_type FROM evaluations WHERE id = $1
`

func (q *Queries) GetEvaluationById(ctx context.Context, evaluationID int32) (Evaluation, error) {
	row := q.db.QueryRowContext(ctx, getEvaluationById, evaluationID)
	var i Evaluation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.EvaluationType,
	)
	return i, err
}

const getEvaluationVoteByEvaluationIdUserIdAndVoter = `-- name: GetEvaluationVoteByEvaluationIdUserIdAndVoter :one
SELECT evaluation_id, user_id, user_id_voter, value, created_at FROM evaluation_votes WHERE evaluation_id = $1 AND user_id = $2 AND user_id_voter = $3
`

type GetEvaluationVoteByEvaluationIdUserIdAndVoterParams struct {
	EvaluationID int32 `json:"evaluation_id"`
	UserID       int32 `json:"user_id"`
	UserIDVoter  int32 `json:"user_id_voter"`
}

func (q *Queries) GetEvaluationVoteByEvaluationIdUserIdAndVoter(ctx context.Context, arg GetEvaluationVoteByEvaluationIdUserIdAndVoterParams) (EvaluationVote, error) {
	row := q.db.QueryRowContext(ctx, getEvaluationVoteByEvaluationIdUserIdAndVoter, arg.EvaluationID, arg.UserID, arg.UserIDVoter)
	var i EvaluationVote
	err := row.Scan(
		&i.EvaluationID,
		&i.UserID,
		&i.UserIDVoter,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}

const getEvaluationVotesByUserId = `-- name: GetEvaluationVotesByUserId :many
SELECT evaluation_id, user_id, user_id_voter, value, created_at FROM evaluation_votes WHERE user_id = $1
`

func (q *Queries) GetEvaluationVotesByUserId(ctx context.Context, userID int32) ([]EvaluationVote, error) {
	rows, err := q.db.QueryContext(ctx, getEvaluationVotesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EvaluationVote{}
	for rows.Next() {
		var i EvaluationVote
		if err := rows.Scan(
			&i.EvaluationID,
			&i.UserID,
			&i.UserIDVoter,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvaluationVotesByUserIdAndVoter = `-- name: GetEvaluationVotesByUserIdAndVoter :many
SELECT evaluation_id, user_id, user_id_voter, value, created_at FROM evaluation_votes WHERE user_id = $1 AND user_id_voter = $2
`

type GetEvaluationVotesByUserIdAndVoterParams struct {
	UserID      int32 `json:"user_id"`
	UserIDVoter int32 `json:"user_id_voter"`
}

func (q *Queries) GetEvaluationVotesByUserIdAndVoter(ctx context.Context, arg GetEvaluationVotesByUserIdAndVoterParams) ([]EvaluationVote, error) {
	rows, err := q.db.QueryContext(ctx, getEvaluationVotesByUserIdAndVoter, arg.UserID, arg.UserIDVoter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EvaluationVote{}
	for rows.Next() {
		var i EvaluationVote
		if err := rows.Scan(
			&i.EvaluationID,
			&i.UserID,
			&i.UserIDVoter,
			&i.Value,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEvaluationsByType = `-- name: GetEvaluationsByType :many
SELECT id, name, description, evaluation_type FROM evaluations WHERE evaluation_type = $1
`

func (q *Queries) GetEvaluationsByType(ctx context.Context, evaluationType EvaluationType) ([]Evaluation, error) {
	rows, err := q.db.QueryContext(ctx, getEvaluationsByType, evaluationType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Evaluation{}
	for rows.Next() {
		var i Evaluation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.EvaluationType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvaluationVote = `-- name: UpdateEvaluationVote :one
UPDATE evaluation_votes
SET
    value = COALESCE($1, value),
    created_at = NOW()
WHERE
    evaluation_id = $2 AND
    user_id = $3 AND
    user_id_voter = $4
RETURNING evaluation_id, user_id, user_id_voter, value, created_at
`

type UpdateEvaluationVoteParams struct {
	Value        float64 `json:"value"`
	EvaluationID int32   `json:"evaluation_id"`
	UserID       int32   `json:"user_id"`
	UserIDVoter  int32   `json:"user_id_voter"`
}

func (q *Queries) UpdateEvaluationVote(ctx context.Context, arg UpdateEvaluationVoteParams) (EvaluationVote, error) {
	row := q.db.QueryRowContext(ctx, updateEvaluationVote,
		arg.Value,
		arg.EvaluationID,
		arg.UserID,
		arg.UserIDVoter,
	)
	var i EvaluationVote
	err := row.Scan(
		&i.EvaluationID,
		&i.UserID,
		&i.UserIDVoter,
		&i.Value,
		&i.CreatedAt,
	)
	return i, err
}
