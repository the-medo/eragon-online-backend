// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: image.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images
(
    img_guid,
    image_type_id,
    name,
    url,
    base_url,
    user_id,
    width,
    height
)
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, img_guid, image_type_id, name, url, base_url, created_at, width, height
`

type CreateImageParams struct {
	ImgGuid   uuid.NullUUID  `json:"img_guid"`
	ImgTypeID sql.NullInt32  `json:"img_type_id"`
	Name      sql.NullString `json:"name"`
	Url       string         `json:"url"`
	BaseUrl   string         `json:"base_url"`
	UserID    int32          `json:"user_id"`
	Width     int32          `json:"width"`
	Height    int32          `json:"height"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage,
		arg.ImgGuid,
		arg.ImgTypeID,
		arg.Name,
		arg.Url,
		arg.BaseUrl,
		arg.UserID,
		arg.Width,
		arg.Height,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImgGuid,
		&i.ImageTypeID,
		&i.Name,
		&i.Url,
		&i.BaseUrl,
		&i.CreatedAt,
		&i.Width,
		&i.Height,
	)
	return i, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM images WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImageByGUID = `-- name: GetImageByGUID :one
SELECT id, user_id, img_guid, image_type_id, name, url, base_url, created_at, width, height FROM images WHERE img_guid = $1 LIMIT 1
`

func (q *Queries) GetImageByGUID(ctx context.Context, imgGuid uuid.NullUUID) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImageByGUID, imgGuid)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImgGuid,
		&i.ImageTypeID,
		&i.Name,
		&i.Url,
		&i.BaseUrl,
		&i.CreatedAt,
		&i.Width,
		&i.Height,
	)
	return i, err
}

const getImageById = `-- name: GetImageById :one
SELECT id, user_id, img_guid, image_type_id, name, url, base_url, created_at, width, height FROM images WHERE id = $1 LIMIT 1
`

func (q *Queries) GetImageById(ctx context.Context, id int32) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImageById, id)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImgGuid,
		&i.ImageTypeID,
		&i.Name,
		&i.Url,
		&i.BaseUrl,
		&i.CreatedAt,
		&i.Width,
		&i.Height,
	)
	return i, err
}

const getImages = `-- name: GetImages :many
WITH cte AS (
    SELECT
        id, user_id, img_guid, image_type_id, name, url, base_url, created_at, width, height, entity_id, module_id, module_type, module_type_id, tags
    FROM get_images($3::int[], $4, $5,  $6, $7, $8, $9, $10, 0, 0)
)
SELECT
    CAST((SELECT count(*) FROM cte) as integer) as total_count,
    cte.id, cte.user_id, cte.img_guid, cte.image_type_id, cte.name, cte.url, cte.base_url, cte.created_at, cte.width, cte.height, cte.entity_id, cte.module_id, cte.module_type, cte.module_type_id, cte.tags
FROM cte
ORDER BY created_at DESC
LIMIT $2
    OFFSET $1
`

type GetImagesParams struct {
	PageOffset     int32          `json:"page_offset"`
	PageLimit      int32          `json:"page_limit"`
	Tags           []int32        `json:"tags"`
	Width          sql.NullInt32  `json:"width"`
	Height         sql.NullInt32  `json:"height"`
	UserID         sql.NullInt32  `json:"user_id"`
	ModuleID       sql.NullInt32  `json:"module_id"`
	ModuleType     NullModuleType `json:"module_type"`
	OrderBy        sql.NullString `json:"order_by"`
	OrderDirection sql.NullString `json:"order_direction"`
}

type GetImagesRow struct {
	TotalCount   int32          `json:"total_count"`
	ID           int32          `json:"id"`
	UserID       int32          `json:"user_id"`
	ImgGuid      uuid.NullUUID  `json:"img_guid"`
	ImageTypeID  sql.NullInt32  `json:"image_type_id"`
	Name         sql.NullString `json:"name"`
	Url          string         `json:"url"`
	BaseUrl      string         `json:"base_url"`
	CreatedAt    time.Time      `json:"created_at"`
	Width        int32          `json:"width"`
	Height       int32          `json:"height"`
	EntityID     sql.NullInt32  `json:"entity_id"`
	ModuleID     sql.NullInt32  `json:"module_id"`
	ModuleType   NullModuleType `json:"module_type"`
	ModuleTypeID sql.NullInt32  `json:"module_type_id"`
	Tags         []int32        `json:"tags"`
}

func (q *Queries) GetImages(ctx context.Context, arg GetImagesParams) ([]GetImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getImages,
		arg.PageOffset,
		arg.PageLimit,
		pq.Array(arg.Tags),
		arg.Width,
		arg.Height,
		arg.UserID,
		arg.ModuleID,
		arg.ModuleType,
		arg.OrderBy,
		arg.OrderDirection,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetImagesRow{}
	for rows.Next() {
		var i GetImagesRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.UserID,
			&i.ImgGuid,
			&i.ImageTypeID,
			&i.Name,
			&i.Url,
			&i.BaseUrl,
			&i.CreatedAt,
			&i.Width,
			&i.Height,
			&i.EntityID,
			&i.ModuleID,
			&i.ModuleType,
			&i.ModuleTypeID,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByIDs = `-- name: GetImagesByIDs :many
SELECT id, user_id, img_guid, image_type_id, name, url, base_url, created_at, width, height FROM images WHERE id = ANY($1::int[])
`

func (q *Queries) GetImagesByIDs(ctx context.Context, imageIds []int32) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImagesByIDs, pq.Array(imageIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImgGuid,
			&i.ImageTypeID,
			&i.Name,
			&i.Url,
			&i.BaseUrl,
			&i.CreatedAt,
			&i.Width,
			&i.Height,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByImageTypeId = `-- name: GetImagesByImageTypeId :many
SELECT id, user_id, img_guid, image_type_id, name, url, base_url, created_at, width, height FROM images WHERE image_type_id = $1
`

func (q *Queries) GetImagesByImageTypeId(ctx context.Context, imgTypeID sql.NullInt32) ([]Image, error) {
	rows, err := q.db.QueryContext(ctx, getImagesByImageTypeId, imgTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Image{}
	for rows.Next() {
		var i Image
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImgGuid,
			&i.ImageTypeID,
			&i.Name,
			&i.Url,
			&i.BaseUrl,
			&i.CreatedAt,
			&i.Width,
			&i.Height,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImage = `-- name: UpdateImage :one
UPDATE images
SET
    img_guid = COALESCE($1, img_guid),
    image_type_id = COALESCE($2, image_type_id),
    name = COALESCE($3, name),
    url = COALESCE($4, url),
    base_url = COALESCE($5, base_url),
    user_id = COALESCE($6, user_id),
    width = COALESCE($7, width),
    height = COALESCE($8, height)
WHERE
    id = $9
RETURNING id, user_id, img_guid, image_type_id, name, url, base_url, created_at, width, height
`

type UpdateImageParams struct {
	ImgGuid     uuid.NullUUID  `json:"img_guid"`
	ImageTypeID sql.NullInt32  `json:"image_type_id"`
	Name        sql.NullString `json:"name"`
	Url         string         `json:"url"`
	BaseUrl     string         `json:"base_url"`
	UserID      int32          `json:"user_id"`
	Width       int32          `json:"width"`
	Height      int32          `json:"height"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateImage(ctx context.Context, arg UpdateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, updateImage,
		arg.ImgGuid,
		arg.ImageTypeID,
		arg.Name,
		arg.Url,
		arg.BaseUrl,
		arg.UserID,
		arg.Width,
		arg.Height,
		arg.ID,
	)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImgGuid,
		&i.ImageTypeID,
		&i.Name,
		&i.Url,
		&i.BaseUrl,
		&i.CreatedAt,
		&i.Width,
		&i.Height,
	)
	return i, err
}
