// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: map.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createMap = `-- name: CreateMap :one
INSERT INTO maps (user_id, title, type, description, width, height, thumbnail_image_id, is_private)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, title, type, created_at, last_updated_at, last_updated_user_id, is_private, description, width, height, thumbnail_image_id
`

type CreateMapParams struct {
	UserID           int32          `json:"user_id"`
	Title            string         `json:"title"`
	Type             sql.NullString `json:"type"`
	Description      sql.NullString `json:"description"`
	Width            int32          `json:"width"`
	Height           int32          `json:"height"`
	ThumbnailImageID sql.NullInt32  `json:"thumbnail_image_id"`
	IsPrivate        bool           `json:"is_private"`
}

func (q *Queries) CreateMap(ctx context.Context, arg CreateMapParams) (Map, error) {
	row := q.db.QueryRowContext(ctx, createMap,
		arg.UserID,
		arg.Title,
		arg.Type,
		arg.Description,
		arg.Width,
		arg.Height,
		arg.ThumbnailImageID,
		arg.IsPrivate,
	)
	var i Map
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Type,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
		&i.IsPrivate,
		&i.Description,
		&i.Width,
		&i.Height,
		&i.ThumbnailImageID,
	)
	return i, err
}

const createMapLayer = `-- name: CreateMapLayer :one
INSERT INTO map_layers (name, map_id, image_id, enabled, position)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, map_id, image_id, enabled, position
`

type CreateMapLayerParams struct {
	Name     string `json:"name"`
	MapID    int32  `json:"map_id"`
	ImageID  int32  `json:"image_id"`
	Enabled  bool   `json:"enabled"`
	Position int32  `json:"position"`
}

func (q *Queries) CreateMapLayer(ctx context.Context, arg CreateMapLayerParams) (MapLayer, error) {
	row := q.db.QueryRowContext(ctx, createMapLayer,
		arg.Name,
		arg.MapID,
		arg.ImageID,
		arg.Enabled,
		arg.Position,
	)
	var i MapLayer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.ImageID,
		&i.Enabled,
		&i.Position,
	)
	return i, err
}

const createMapPin = `-- name: CreateMapPin :one
INSERT INTO map_pins (name, map_id, map_pin_type_id, location_id, map_layer_id, x, y)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, map_id, map_pin_type_id, location_id, map_layer_id, x, y
`

type CreateMapPinParams struct {
	Name         string        `json:"name"`
	MapID        int32         `json:"map_id"`
	MapPinTypeID sql.NullInt32 `json:"map_pin_type_id"`
	LocationID   sql.NullInt32 `json:"location_id"`
	MapLayerID   sql.NullInt32 `json:"map_layer_id"`
	X            int32         `json:"x"`
	Y            int32         `json:"y"`
}

func (q *Queries) CreateMapPin(ctx context.Context, arg CreateMapPinParams) (MapPin, error) {
	row := q.db.QueryRowContext(ctx, createMapPin,
		arg.Name,
		arg.MapID,
		arg.MapPinTypeID,
		arg.LocationID,
		arg.MapLayerID,
		arg.X,
		arg.Y,
	)
	var i MapPin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.MapPinTypeID,
		&i.LocationID,
		&i.MapLayerID,
		&i.X,
		&i.Y,
	)
	return i, err
}

const createMapPinType = `-- name: CreateMapPinType :one

INSERT INTO map_pin_types (shape, background_color, border_color, icon_color, icon, icon_size, width, map_pin_type_group_id, is_default)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9 )
RETURNING id, map_pin_type_group_id, shape, background_color, border_color, icon_color, icon, icon_size, width, is_default
`

type CreateMapPinTypeParams struct {
	Shape             PinShape       `json:"shape"`
	BackgroundColor   sql.NullString `json:"background_color"`
	BorderColor       sql.NullString `json:"border_color"`
	IconColor         sql.NullString `json:"icon_color"`
	Icon              sql.NullString `json:"icon"`
	IconSize          sql.NullInt32  `json:"icon_size"`
	Width             sql.NullInt32  `json:"width"`
	MapPinTypeGroupID int32          `json:"map_pin_type_group_id"`
	IsDefault         sql.NullBool   `json:"is_default"`
}

// ------------------------------------
func (q *Queries) CreateMapPinType(ctx context.Context, arg CreateMapPinTypeParams) (MapPinType, error) {
	row := q.db.QueryRowContext(ctx, createMapPinType,
		arg.Shape,
		arg.BackgroundColor,
		arg.BorderColor,
		arg.IconColor,
		arg.Icon,
		arg.IconSize,
		arg.Width,
		arg.MapPinTypeGroupID,
		arg.IsDefault,
	)
	var i MapPinType
	err := row.Scan(
		&i.ID,
		&i.MapPinTypeGroupID,
		&i.Shape,
		&i.BackgroundColor,
		&i.BorderColor,
		&i.IconColor,
		&i.Icon,
		&i.IconSize,
		&i.Width,
		&i.IsDefault,
	)
	return i, err
}

const createMapPinTypeGroup = `-- name: CreateMapPinTypeGroup :one
INSERT INTO map_pin_type_group (name)
VALUES ($1)
RETURNING id, name
`

// ------------------------------------
func (q *Queries) CreateMapPinTypeGroup(ctx context.Context, name string) (MapPinTypeGroup, error) {
	row := q.db.QueryRowContext(ctx, createMapPinTypeGroup, name)
	var i MapPinTypeGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createModuleMapPinTypeGroup = `-- name: CreateModuleMapPinTypeGroup :one
INSERT INTO module_map_pin_type_groups (module_id, map_pin_type_group_id)
VALUES ($1, $2)
RETURNING module_id, map_pin_type_group_id
`

type CreateModuleMapPinTypeGroupParams struct {
	ModuleID          int32 `json:"module_id"`
	MapPinTypeGroupID int32 `json:"map_pin_type_group_id"`
}

func (q *Queries) CreateModuleMapPinTypeGroup(ctx context.Context, arg CreateModuleMapPinTypeGroupParams) (ModuleMapPinTypeGroup, error) {
	row := q.db.QueryRowContext(ctx, createModuleMapPinTypeGroup, arg.ModuleID, arg.MapPinTypeGroupID)
	var i ModuleMapPinTypeGroup
	err := row.Scan(&i.ModuleID, &i.MapPinTypeGroupID)
	return i, err
}

const decreaseMapLayerPositions = `-- name: DecreaseMapLayerPositions :exec
UPDATE map_layers SET position = position - 1
WHERE map_id = $1 AND position >= $2
`

type DecreaseMapLayerPositionsParams struct {
	MapID    int32 `json:"map_id"`
	Position int32 `json:"position"`
}

func (q *Queries) DecreaseMapLayerPositions(ctx context.Context, arg DecreaseMapLayerPositionsParams) error {
	_, err := q.db.ExecContext(ctx, decreaseMapLayerPositions, arg.MapID, arg.Position)
	return err
}

const deleteMap = `-- name: DeleteMap :exec
CALL delete_map($1)
`

func (q *Queries) DeleteMap(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMap, id)
	return err
}

const deleteMapLayer = `-- name: DeleteMapLayer :exec
DELETE FROM map_layers WHERE id = $1
`

func (q *Queries) DeleteMapLayer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapLayer, id)
	return err
}

const deleteMapLayersForMap = `-- name: DeleteMapLayersForMap :exec
DELETE FROM map_layers WHERE map_id = $1
`

func (q *Queries) DeleteMapLayersForMap(ctx context.Context, mapID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapLayersForMap, mapID)
	return err
}

const deleteMapPin = `-- name: DeleteMapPin :exec
DELETE FROM map_pins WHERE id = $1
`

func (q *Queries) DeleteMapPin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPin, id)
	return err
}

const deleteMapPinType = `-- name: DeleteMapPinType :exec
DELETE FROM map_pin_types WHERE id = $1
`

func (q *Queries) DeleteMapPinType(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPinType, id)
	return err
}

const deleteMapPinTypeGroup = `-- name: DeleteMapPinTypeGroup :exec
DELETE FROM map_pin_type_group WHERE id = $1
`

func (q *Queries) DeleteMapPinTypeGroup(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPinTypeGroup, id)
	return err
}

const deleteMapPinsForMap = `-- name: DeleteMapPinsForMap :exec
DELETE FROM map_pins WHERE map_id = $1
`

func (q *Queries) DeleteMapPinsForMap(ctx context.Context, mapID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPinsForMap, mapID)
	return err
}

const deleteMapPinsForMapLayer = `-- name: DeleteMapPinsForMapLayer :exec
DELETE FROM map_pins WHERE map_layer_id = $1
`

func (q *Queries) DeleteMapPinsForMapLayer(ctx context.Context, mapLayerID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteMapPinsForMapLayer, mapLayerID)
	return err
}

const deleteModuleMapPinTypeGroup = `-- name: DeleteModuleMapPinTypeGroup :exec
DELETE FROM module_map_pin_type_groups WHERE module_id = $1 AND map_pin_type_group_id = $2
`

type DeleteModuleMapPinTypeGroupParams struct {
	ModuleID          int32 `json:"module_id"`
	MapPinTypeGroupID int32 `json:"map_pin_type_group_id"`
}

func (q *Queries) DeleteModuleMapPinTypeGroup(ctx context.Context, arg DeleteModuleMapPinTypeGroupParams) error {
	_, err := q.db.ExecContext(ctx, deleteModuleMapPinTypeGroup, arg.ModuleID, arg.MapPinTypeGroupID)
	return err
}

const getDefaultMapPinTypeForMap = `-- name: GetDefaultMapPinTypeForMap :one
SELECT
    mpt.id
FROM
    map_pin_types mpt
    JOIN module_map_pin_type_groups mmptg ON mpt.map_pin_type_group_id = mmptg.map_pin_type_group_id
    JOIN entities e ON e.module_id = mmptg.module_id
WHERE e.map_id = $1 AND mpt.is_default = true
`

func (q *Queries) GetDefaultMapPinTypeForMap(ctx context.Context, mapID sql.NullInt32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getDefaultMapPinTypeForMap, mapID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getDefaultMapPinTypeForModule = `-- name: GetDefaultMapPinTypeForModule :one
SELECT
    mpt.id
FROM
    map_pin_types mpt
    JOIN module_map_pin_type_groups mmptg ON mpt.map_pin_type_group_id = mmptg.map_pin_type_group_id
WHERE mmptg.module_id = $1 AND mpt.is_default = true
`

func (q *Queries) GetDefaultMapPinTypeForModule(ctx context.Context, moduleID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getDefaultMapPinTypeForModule, moduleID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getMapAssignments = `-- name: GetMapAssignments :one
SELECT
    m.id, m.module_type, m.menu_id, m.header_img_id, m.thumbnail_img_id, m.avatar_img_id, m.world_id, m.system_id, m.character_id, m.quest_id, m.description_post_id
FROM
    entities e
    LEFT JOIN modules m ON e.module_id = m.id
WHERE e.map_id = $1
`

type GetMapAssignmentsRow struct {
	ID                sql.NullInt32  `json:"id"`
	ModuleType        NullModuleType `json:"module_type"`
	MenuID            sql.NullInt32  `json:"menu_id"`
	HeaderImgID       sql.NullInt32  `json:"header_img_id"`
	ThumbnailImgID    sql.NullInt32  `json:"thumbnail_img_id"`
	AvatarImgID       sql.NullInt32  `json:"avatar_img_id"`
	WorldID           sql.NullInt32  `json:"world_id"`
	SystemID          sql.NullInt32  `json:"system_id"`
	CharacterID       sql.NullInt32  `json:"character_id"`
	QuestID           sql.NullInt32  `json:"quest_id"`
	DescriptionPostID sql.NullInt32  `json:"description_post_id"`
}

func (q *Queries) GetMapAssignments(ctx context.Context, mapID sql.NullInt32) (GetMapAssignmentsRow, error) {
	row := q.db.QueryRowContext(ctx, getMapAssignments, mapID)
	var i GetMapAssignmentsRow
	err := row.Scan(
		&i.ID,
		&i.ModuleType,
		&i.MenuID,
		&i.HeaderImgID,
		&i.ThumbnailImgID,
		&i.AvatarImgID,
		&i.WorldID,
		&i.SystemID,
		&i.CharacterID,
		&i.QuestID,
		&i.DescriptionPostID,
	)
	return i, err
}

const getMapById = `-- name: GetMapById :one
SELECT id, user_id, title, type, created_at, last_updated_at, last_updated_user_id, is_private, description, width, height, thumbnail_image_id FROM maps WHERE id = $1
`

func (q *Queries) GetMapById(ctx context.Context, id int32) (Map, error) {
	row := q.db.QueryRowContext(ctx, getMapById, id)
	var i Map
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Type,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
		&i.IsPrivate,
		&i.Description,
		&i.Width,
		&i.Height,
		&i.ThumbnailImageID,
	)
	return i, err
}

const getMapLayerByID = `-- name: GetMapLayerByID :one
SELECT id, name, map_id, image_id, enabled, position, image_url FROM view_map_layers WHERE id = $1
`

func (q *Queries) GetMapLayerByID(ctx context.Context, mapLayerID int32) (ViewMapLayer, error) {
	row := q.db.QueryRowContext(ctx, getMapLayerByID, mapLayerID)
	var i ViewMapLayer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.ImageID,
		&i.Enabled,
		&i.Position,
		&i.ImageUrl,
	)
	return i, err
}

const getMapLayers = `-- name: GetMapLayers :many
SELECT id, name, map_id, image_id, enabled, position, image_url FROM view_map_layers WHERE map_id = $1
`

func (q *Queries) GetMapLayers(ctx context.Context, mapID int32) ([]ViewMapLayer, error) {
	rows, err := q.db.QueryContext(ctx, getMapLayers, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewMapLayer{}
	for rows.Next() {
		var i ViewMapLayer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MapID,
			&i.ImageID,
			&i.Enabled,
			&i.Position,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapPinByID = `-- name: GetMapPinByID :one
SELECT id, name, map_id, map_pin_type_id, location_id, map_layer_id, x, y, location_name, location_post_id, location_description, location_thumbnail_image_id, location_thumbnail_image_url FROM view_map_pins WHERE id = $1
`

func (q *Queries) GetMapPinByID(ctx context.Context, id int32) (ViewMapPin, error) {
	row := q.db.QueryRowContext(ctx, getMapPinByID, id)
	var i ViewMapPin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.MapPinTypeID,
		&i.LocationID,
		&i.MapLayerID,
		&i.X,
		&i.Y,
		&i.LocationName,
		&i.LocationPostID,
		&i.LocationDescription,
		&i.LocationThumbnailImageID,
		&i.LocationThumbnailImageUrl,
	)
	return i, err
}

const getMapPinTypeGroupsForModule = `-- name: GetMapPinTypeGroupsForModule :many
SELECT
    mptg.id, mptg.name
FROM
    map_pin_type_group mptg
    JOIN module_map_pin_type_groups mmptg ON mptg.id = mmptg.map_pin_type_group_id
WHERE mmptg.module_id = $1
`

func (q *Queries) GetMapPinTypeGroupsForModule(ctx context.Context, moduleID int32) ([]MapPinTypeGroup, error) {
	rows, err := q.db.QueryContext(ctx, getMapPinTypeGroupsForModule, moduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MapPinTypeGroup{}
	for rows.Next() {
		var i MapPinTypeGroup
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapPinTypesForMap = `-- name: GetMapPinTypesForMap :many
SELECT
    mpt.id, mpt.map_pin_type_group_id, mpt.shape, mpt.background_color, mpt.border_color, mpt.icon_color, mpt.icon, mpt.icon_size, mpt.width, mpt.is_default
FROM
    map_pin_types mpt
    JOIN module_map_pin_type_groups mmptg ON mpt.map_pin_type_group_id = mmptg.map_pin_type_group_id
    JOIN entities e ON e.module_id = mmptg.module_id
WHERE e.map_id = $1
`

func (q *Queries) GetMapPinTypesForMap(ctx context.Context, mapID sql.NullInt32) ([]MapPinType, error) {
	rows, err := q.db.QueryContext(ctx, getMapPinTypesForMap, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MapPinType{}
	for rows.Next() {
		var i MapPinType
		if err := rows.Scan(
			&i.ID,
			&i.MapPinTypeGroupID,
			&i.Shape,
			&i.BackgroundColor,
			&i.BorderColor,
			&i.IconColor,
			&i.Icon,
			&i.IconSize,
			&i.Width,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapPinTypesForModule = `-- name: GetMapPinTypesForModule :many
SELECT
    mpt.id, mpt.map_pin_type_group_id, mpt.shape, mpt.background_color, mpt.border_color, mpt.icon_color, mpt.icon, mpt.icon_size, mpt.width, mpt.is_default
FROM
    map_pin_types mpt
    JOIN module_map_pin_type_groups mmptg ON mpt.map_pin_type_group_id = mmptg.map_pin_type_group_id
WHERE mmptg.module_id = $1
`

func (q *Queries) GetMapPinTypesForModule(ctx context.Context, moduleID int32) ([]MapPinType, error) {
	rows, err := q.db.QueryContext(ctx, getMapPinTypesForModule, moduleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MapPinType{}
	for rows.Next() {
		var i MapPinType
		if err := rows.Scan(
			&i.ID,
			&i.MapPinTypeGroupID,
			&i.Shape,
			&i.BackgroundColor,
			&i.BorderColor,
			&i.IconColor,
			&i.Icon,
			&i.IconSize,
			&i.Width,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapPins = `-- name: GetMapPins :many
SELECT id, name, map_id, map_pin_type_id, location_id, map_layer_id, x, y, location_name, location_post_id, location_description, location_thumbnail_image_id, location_thumbnail_image_url FROM view_map_pins WHERE map_id = $1
`

func (q *Queries) GetMapPins(ctx context.Context, mapID int32) ([]ViewMapPin, error) {
	rows, err := q.db.QueryContext(ctx, getMapPins, mapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewMapPin{}
	for rows.Next() {
		var i ViewMapPin
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MapID,
			&i.MapPinTypeID,
			&i.LocationID,
			&i.MapLayerID,
			&i.X,
			&i.Y,
			&i.LocationName,
			&i.LocationPostID,
			&i.LocationDescription,
			&i.LocationThumbnailImageID,
			&i.LocationThumbnailImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaps = `-- name: GetMaps :many
WITH cte AS (
    SELECT
        id, user_id, title, type, created_at, last_updated_at, last_updated_user_id, is_private, description, width, height, thumbnail_image_id, base_layer_image_id, thumbnail_image_url, entity_id, module_id, module_type, module_type_id, tags
    FROM get_maps( $3::int[], $4, $5, $6, $7, 0, 0)
)
SELECT
    CAST((SELECT count(*) FROM cte) as integer) as total_count,
    cte.id, cte.user_id, cte.title, cte.type, cte.created_at, cte.last_updated_at, cte.last_updated_user_id, cte.is_private, cte.description, cte.width, cte.height, cte.thumbnail_image_id, cte.base_layer_image_id, cte.thumbnail_image_url, cte.entity_id, cte.module_id, cte.module_type, cte.module_type_id, cte.tags
FROM cte
ORDER BY id DESC
LIMIT $2
    OFFSET $1
`

type GetMapsParams struct {
	PageOffset     int32          `json:"page_offset"`
	PageLimit      int32          `json:"page_limit"`
	Tags           []int32        `json:"tags"`
	ModuleID       sql.NullInt32  `json:"module_id"`
	ModuleType     NullModuleType `json:"module_type"`
	OrderBy        sql.NullString `json:"order_by"`
	OrderDirection sql.NullString `json:"order_direction"`
}

type GetMapsRow struct {
	TotalCount        int32          `json:"total_count"`
	ID                int32          `json:"id"`
	UserID            int32          `json:"user_id"`
	Title             string         `json:"title"`
	Type              sql.NullString `json:"type"`
	CreatedAt         time.Time      `json:"created_at"`
	LastUpdatedAt     sql.NullTime   `json:"last_updated_at"`
	LastUpdatedUserID sql.NullInt32  `json:"last_updated_user_id"`
	IsPrivate         bool           `json:"is_private"`
	Description       sql.NullString `json:"description"`
	Width             int32          `json:"width"`
	Height            int32          `json:"height"`
	ThumbnailImageID  sql.NullInt32  `json:"thumbnail_image_id"`
	BaseLayerImageID  int32          `json:"base_layer_image_id"`
	ThumbnailImageUrl sql.NullString `json:"thumbnail_image_url"`
	EntityID          sql.NullInt32  `json:"entity_id"`
	ModuleID          sql.NullInt32  `json:"module_id"`
	ModuleType        NullModuleType `json:"module_type"`
	ModuleTypeID      sql.NullInt32  `json:"module_type_id"`
	Tags              []int32        `json:"tags"`
}

func (q *Queries) GetMaps(ctx context.Context, arg GetMapsParams) ([]GetMapsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMaps,
		arg.PageOffset,
		arg.PageLimit,
		pq.Array(arg.Tags),
		arg.ModuleID,
		arg.ModuleType,
		arg.OrderBy,
		arg.OrderDirection,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMapsRow{}
	for rows.Next() {
		var i GetMapsRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Type,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.LastUpdatedUserID,
			&i.IsPrivate,
			&i.Description,
			&i.Width,
			&i.Height,
			&i.ThumbnailImageID,
			&i.BaseLayerImageID,
			&i.ThumbnailImageUrl,
			&i.EntityID,
			&i.ModuleID,
			&i.ModuleType,
			&i.ModuleTypeID,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMapsByIDs = `-- name: GetMapsByIDs :many
SELECT id, user_id, title, type, created_at, last_updated_at, last_updated_user_id, is_private, description, width, height, thumbnail_image_id FROM maps WHERE id = ANY($1::int[])
`

func (q *Queries) GetMapsByIDs(ctx context.Context, mapIds []int32) ([]Map, error) {
	rows, err := q.db.QueryContext(ctx, getMapsByIDs, pq.Array(mapIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Map{}
	for rows.Next() {
		var i Map
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Type,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.LastUpdatedUserID,
			&i.IsPrivate,
			&i.Description,
			&i.Width,
			&i.Height,
			&i.ThumbnailImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxMapLayerPosition = `-- name: GetMaxMapLayerPosition :one
SELECT CAST(MAX(position) as integer) FROM map_layers WHERE map_id = $1
`

func (q *Queries) GetMaxMapLayerPosition(ctx context.Context, mapID int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getMaxMapLayerPosition, mapID)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const increaseMapLayerPositions = `-- name: IncreaseMapLayerPositions :exec
UPDATE map_layers SET position = position + 1
WHERE map_id = $1 AND position >= $2
`

type IncreaseMapLayerPositionsParams struct {
	MapID    int32 `json:"map_id"`
	Position int32 `json:"position"`
}

func (q *Queries) IncreaseMapLayerPositions(ctx context.Context, arg IncreaseMapLayerPositionsParams) error {
	_, err := q.db.ExecContext(ctx, increaseMapLayerPositions, arg.MapID, arg.Position)
	return err
}

const moveMapLayer = `-- name: MoveMapLayer :exec
CALL move_map_layer($1, $2)
`

type MoveMapLayerParams struct {
	ID       int32 `json:"id"`
	Position int32 `json:"position"`
}

func (q *Queries) MoveMapLayer(ctx context.Context, arg MoveMapLayerParams) error {
	_, err := q.db.ExecContext(ctx, moveMapLayer, arg.ID, arg.Position)
	return err
}

const updateMap = `-- name: UpdateMap :one
UPDATE maps
SET
    title = COALESCE($1, title),
    type = COALESCE($2, type),
    description = COALESCE($3, description),
    width = COALESCE($4, width),
    height = COALESCE($5, height),
    thumbnail_image_id = COALESCE($6, thumbnail_image_id),
    is_private = COALESCE($7, is_private),
    last_updated_at = now(),
    last_updated_user_id =  COALESCE($8, last_updated_user_id)
WHERE id = $9
RETURNING id, user_id, title, type, created_at, last_updated_at, last_updated_user_id, is_private, description, width, height, thumbnail_image_id
`

type UpdateMapParams struct {
	Title             sql.NullString `json:"title"`
	Type              sql.NullString `json:"type"`
	Description       sql.NullString `json:"description"`
	Width             sql.NullInt32  `json:"width"`
	Height            sql.NullInt32  `json:"height"`
	ThumbnailImageID  sql.NullInt32  `json:"thumbnail_image_id"`
	IsPrivate         sql.NullBool   `json:"is_private"`
	LastUpdatedUserID sql.NullInt32  `json:"last_updated_user_id"`
	ID                int32          `json:"id"`
}

func (q *Queries) UpdateMap(ctx context.Context, arg UpdateMapParams) (Map, error) {
	row := q.db.QueryRowContext(ctx, updateMap,
		arg.Title,
		arg.Type,
		arg.Description,
		arg.Width,
		arg.Height,
		arg.ThumbnailImageID,
		arg.IsPrivate,
		arg.LastUpdatedUserID,
		arg.ID,
	)
	var i Map
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Type,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.LastUpdatedUserID,
		&i.IsPrivate,
		&i.Description,
		&i.Width,
		&i.Height,
		&i.ThumbnailImageID,
	)
	return i, err
}

const updateMapLayer = `-- name: UpdateMapLayer :one
UPDATE map_layers
SET
    name = COALESCE($1, name),
    image_id = COALESCE($2, image_id),
    enabled = COALESCE($3, enabled),
    position = COALESCE($4, position)
WHERE id = $5
RETURNING id, name, map_id, image_id, enabled, position
`

type UpdateMapLayerParams struct {
	Name     sql.NullString `json:"name"`
	ImageID  sql.NullInt32  `json:"image_id"`
	Enabled  sql.NullBool   `json:"enabled"`
	Position sql.NullInt32  `json:"position"`
	ID       int32          `json:"id"`
}

func (q *Queries) UpdateMapLayer(ctx context.Context, arg UpdateMapLayerParams) (MapLayer, error) {
	row := q.db.QueryRowContext(ctx, updateMapLayer,
		arg.Name,
		arg.ImageID,
		arg.Enabled,
		arg.Position,
		arg.ID,
	)
	var i MapLayer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.ImageID,
		&i.Enabled,
		&i.Position,
	)
	return i, err
}

const updateMapPin = `-- name: UpdateMapPin :one
UPDATE map_pins
SET
    name = COALESCE($1, name),
    map_pin_type_id = COALESCE($2, map_pin_type_id),
    location_id = COALESCE($3, location_id),
    map_layer_id = COALESCE($4, map_layer_id),
    x = COALESCE($5, x),
    y = COALESCE($6, y)
WHERE id = $7
RETURNING id, name, map_id, map_pin_type_id, location_id, map_layer_id, x, y
`

type UpdateMapPinParams struct {
	Name         sql.NullString `json:"name"`
	MapPinTypeID sql.NullInt32  `json:"map_pin_type_id"`
	LocationID   sql.NullInt32  `json:"location_id"`
	MapLayerID   sql.NullInt32  `json:"map_layer_id"`
	X            sql.NullInt32  `json:"x"`
	Y            sql.NullInt32  `json:"y"`
	ID           int32          `json:"id"`
}

func (q *Queries) UpdateMapPin(ctx context.Context, arg UpdateMapPinParams) (MapPin, error) {
	row := q.db.QueryRowContext(ctx, updateMapPin,
		arg.Name,
		arg.MapPinTypeID,
		arg.LocationID,
		arg.MapLayerID,
		arg.X,
		arg.Y,
		arg.ID,
	)
	var i MapPin
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MapID,
		&i.MapPinTypeID,
		&i.LocationID,
		&i.MapLayerID,
		&i.X,
		&i.Y,
	)
	return i, err
}

const updateMapPinType = `-- name: UpdateMapPinType :one
UPDATE map_pin_types
SET
    shape = COALESCE($1, shape),
    background_color = COALESCE($2, background_color),
    border_color = COALESCE($3, border_color),
    icon_color = COALESCE($4, icon_color),
    icon = COALESCE($5, icon),
    icon_size = COALESCE($6, icon_size),
    width = COALESCE($7, width),
    is_default = COALESCE($8, is_default)
WHERE id = $9
RETURNING id, map_pin_type_group_id, shape, background_color, border_color, icon_color, icon, icon_size, width, is_default
`

type UpdateMapPinTypeParams struct {
	Shape           NullPinShape   `json:"shape"`
	BackgroundColor sql.NullString `json:"background_color"`
	BorderColor     sql.NullString `json:"border_color"`
	IconColor       sql.NullString `json:"icon_color"`
	Icon            sql.NullString `json:"icon"`
	IconSize        sql.NullInt32  `json:"icon_size"`
	Width           sql.NullInt32  `json:"width"`
	IsDefault       sql.NullBool   `json:"is_default"`
	ID              int32          `json:"id"`
}

func (q *Queries) UpdateMapPinType(ctx context.Context, arg UpdateMapPinTypeParams) (MapPinType, error) {
	row := q.db.QueryRowContext(ctx, updateMapPinType,
		arg.Shape,
		arg.BackgroundColor,
		arg.BorderColor,
		arg.IconColor,
		arg.Icon,
		arg.IconSize,
		arg.Width,
		arg.IsDefault,
		arg.ID,
	)
	var i MapPinType
	err := row.Scan(
		&i.ID,
		&i.MapPinTypeGroupID,
		&i.Shape,
		&i.BackgroundColor,
		&i.BorderColor,
		&i.IconColor,
		&i.Icon,
		&i.IconSize,
		&i.Width,
		&i.IsDefault,
	)
	return i, err
}

const updateMapPinTypeGroup = `-- name: UpdateMapPinTypeGroup :one
UPDATE map_pin_type_group
SET
    name = COALESCE($1, name)
WHERE id = $2
RETURNING id, name
`

type UpdateMapPinTypeGroupParams struct {
	Name sql.NullString `json:"name"`
	ID   int32          `json:"id"`
}

func (q *Queries) UpdateMapPinTypeGroup(ctx context.Context, arg UpdateMapPinTypeGroupParams) (MapPinTypeGroup, error) {
	row := q.db.QueryRowContext(ctx, updateMapPinTypeGroup, arg.Name, arg.ID)
	var i MapPinTypeGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
