// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: system.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createSystem = `-- name: CreateSystem :one
INSERT INTO systems (
    name,
    based_on,
    short_description
) VALUES (
    $1, $2, $3
) RETURNING id, name, based_on, public, created_at, short_description
`

type CreateSystemParams struct {
	Name             string `json:"name"`
	BasedOn          string `json:"based_on"`
	ShortDescription string `json:"short_description"`
}

func (q *Queries) CreateSystem(ctx context.Context, arg CreateSystemParams) (System, error) {
	row := q.db.QueryRowContext(ctx, createSystem, arg.Name, arg.BasedOn, arg.ShortDescription)
	var i System
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BasedOn,
		&i.Public,
		&i.CreatedAt,
		&i.ShortDescription,
	)
	return i, err
}

const deleteSystem = `-- name: DeleteSystem :exec
DELETE FROM systems WHERE id = $1
`

func (q *Queries) DeleteSystem(ctx context.Context, systemID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSystem, systemID)
	return err
}

const getSystemByID = `-- name: GetSystemByID :one
SELECT id, name, based_on, public, created_at, short_description FROM systems WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSystemByID(ctx context.Context, systemID int32) (System, error) {
	row := q.db.QueryRowContext(ctx, getSystemByID, systemID)
	var i System
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BasedOn,
		&i.Public,
		&i.CreatedAt,
		&i.ShortDescription,
	)
	return i, err
}

const getSystems = `-- name: GetSystems :many
SELECT id, name, based_on, public, created_at, short_description, module_id, menu_id, header_img_id, thumbnail_img_id, avatar_img_id, tags FROM get_systems($1::boolean, $2::integer[], $3::VARCHAR, 'DESC', $4, $5)
`

type GetSystemsParams struct {
	IsPublic   bool    `json:"is_public"`
	Tags       []int32 `json:"tags"`
	OrderBy    string  `json:"order_by"`
	PageLimit  int32   `json:"page_limit"`
	PageOffset int32   `json:"page_offset"`
}

func (q *Queries) GetSystems(ctx context.Context, arg GetSystemsParams) ([]ViewSystem, error) {
	rows, err := q.db.QueryContext(ctx, getSystems,
		arg.IsPublic,
		pq.Array(arg.Tags),
		arg.OrderBy,
		arg.PageLimit,
		arg.PageOffset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ViewSystem{}
	for rows.Next() {
		var i ViewSystem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BasedOn,
			&i.Public,
			&i.CreatedAt,
			&i.ShortDescription,
			&i.ModuleID,
			&i.MenuID,
			&i.HeaderImgID,
			&i.ThumbnailImgID,
			&i.AvatarImgID,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemsByIDs = `-- name: GetSystemsByIDs :many
SELECT id, name, based_on, public, created_at, short_description FROM systems WHERE id = ANY($1::int[])
`

func (q *Queries) GetSystemsByIDs(ctx context.Context, systemIds []int32) ([]System, error) {
	rows, err := q.db.QueryContext(ctx, getSystemsByIDs, pq.Array(systemIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []System{}
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.BasedOn,
			&i.Public,
			&i.CreatedAt,
			&i.ShortDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemsCount = `-- name: GetSystemsCount :one
SELECT COUNT(*) FROM view_systems
WHERE ($1::boolean IS NULL OR public = $1) AND
    (array_length($2::integer[], 1) IS NULL OR tags @> $2::integer[])
`

type GetSystemsCountParams struct {
	IsPublic bool    `json:"is_public"`
	Tags     []int32 `json:"tags"`
}

func (q *Queries) GetSystemsCount(ctx context.Context, arg GetSystemsCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSystemsCount, arg.IsPublic, pq.Array(arg.Tags))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateSystem = `-- name: UpdateSystem :one
UPDATE systems
SET
    name = COALESCE($1, name),
    based_on = COALESCE($2, based_on),
    public = COALESCE($3, public),
    short_description = COALESCE($4, short_description)
WHERE
    id = $5
RETURNING id, name, based_on, public, created_at, short_description
`

type UpdateSystemParams struct {
	Name             sql.NullString `json:"name"`
	BasedOn          sql.NullString `json:"based_on"`
	Public           sql.NullBool   `json:"public"`
	ShortDescription sql.NullString `json:"short_description"`
	SystemID         int32          `json:"system_id"`
}

func (q *Queries) UpdateSystem(ctx context.Context, arg UpdateSystemParams) (System, error) {
	row := q.db.QueryRowContext(ctx, updateSystem,
		arg.Name,
		arg.BasedOn,
		arg.Public,
		arg.ShortDescription,
		arg.SystemID,
	)
	var i System
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.BasedOn,
		&i.Public,
		&i.CreatedAt,
		&i.ShortDescription,
	)
	return i, err
}
