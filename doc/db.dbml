// Use DBML to define your database structure
// Docs: https://www.dbml.org/docs

enum image_variant {
  100x100
  1200x800
  150x150
  1920x300
  200x200
  300x300
  30x30
  original
  public
  600x400
  400x600
  300x200
  200x300
  250x50
}

enum pin_shape {
  none
  square
  triangle
  pin
  circle
  hexagon
  octagon
  star
  diamond
  pentagon
  heart
  cloud
}

enum module_type {
  unknown
  world
  quest
  character
  system
}

enum entity_type {
  unknown
  post
  map
  location
  character
  image
}

enum delete_entity_group_content_action {
  unknown
  delete_children
  move_children
}

Table image_types {
  id int [not null, unique]
  name varchar [unique, not null]
  description text [not null]
  variant image_variant [not null, note: 'Variant name from cloudflare. ']
}

Table images {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  img_guid uuid [unique]
  image_type_id int [ref: > image_types.id]
  name varchar [unique]
  url varchar [not null]
  base_url varchar [not null]
  created_at timestamptz [not null, default: `now()`]
  width int [not null, default: 0]
  height int [not null, default: 0]
}

Table users {
  id int [pk, increment]
  username varchar [not null, unique]
  hashed_password varchar [not null]
  email varchar [not null, unique]
  img_id int [null, ref: > images.id]
  password_changed_at timestamptz [not null, default: '0001-01-01 00:00:00Z']
  created_at timestamptz [not null, default: `now()`]
  is_email_verified bool [not null, default: false]
  introduction_post_id int [null, ref: > posts.id]
}

Table sessions {
  id uuid [pk]
  user_id int [not null, ref: > users.id]
  username varchar [not null]
  refresh_token varchar [not null]
  user_agent varchar [not null]
  client_ip varchar [not null]
  is_blocked boolean [not null, default: false]
  created_at timestamptz [not null, default: `now()`]
  expired_at timestamptz [not null, default: `now() + INTERVAL '15 minutes'`]
}

Table user_modules {
  user_id int [not null, ref: > users.id]
  module_id int [not null, ref: > modules.id]
  admin bool [not null]
  favorite bool [not null]
  following bool [not null]
  entity_notifications entity_type[]

  indexes {
    (user_id, module_id) [unique]
  }
}

enum evaluation_type {
  self
  dm
}

Table evaluations {
  id int [pk, increment]
  name varchar [not null]
  description varchar [not null]
  evaluation_type evaluation_type [not null]
}

Table evaluation_votes {
  evaluation_id int [not null, ref: > evaluations.id]
  user_id int [not null, ref: > users.id]
  user_id_voter int [not null, ref: > users.id]
  value float [not null]
  created_at timestamptz [not null, default: `now()`]

  indexes {
    (evaluation_id, user_id, user_id_voter) [unique]
  }
}

Table user_password_reset {
  user_id int [not null, ref: > users.id]
  code varchar [not null]
  expired_at timestamptz [not null, default: `now() + INTERVAL '15 minutes'`]
}

Table verify_emails {
  id bigserial [pk]
  user_id int [not null, ref: > users.id]
  email varchar [not null]
  secret_code varchar [not null]
  is_used boolean [not null, default: false]
  created_at timestamptz [not null, default: `now()`]
  expired_at timestamptz [not null, default: `now() + INTERVAL '15 minutes'`]
}

Table roles {
  id int [not null, unique]
  name varchar [not null, unique]
  description text [not null]
}

Table user_roles {
  user_id int [not null, ref: > users.id]
  role_id int [not null, ref: > roles.id]
  created_at timestamptz [not null, default: `now()`]

  indexes {
    (role_id, user_id) [unique]
  }
}

Table worlds {
  id int [pk, increment]
  name varchar [not null, unique]
  based_on varchar [not null]
  public boolean [not null, default: false]
  created_at timestamptz [not null, default: `now()`]
  short_description varchar [not null, default: '']
}

Table module_admins {
  module_id int [not null, ref: > modules.id]
  user_id int [not null, ref: > users.id]
  created_at timestamptz [not null, default: `now()`]
  super_admin boolean [not null, default: false]
  approved int [not null, note: '0 = NO, 1 = YES, 2 = PENDING']
  motivational_letter varchar [not null]
  allowed_entity_types entity_type[]
  allowed_menu boolean [not null, default: false]

  indexes {
    (module_id, user_id) [unique]
  }
}

Table posts {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  title varchar [not null]
  description varchar
  content varchar [not null]
  created_at timestamptz [not null, default: `now()`]
  deleted_at timestamptz
  last_updated_at timestamptz
  last_updated_user_id int [ref: > users.id]
  is_draft bool [not null]
  is_private bool [not null]
  thumbnail_img_id int [ref: > images.id]
}

Table post_history {
  id int [pk, increment]
  post_id int [not null, ref: > posts.id]
  user_id int [not null, ref: > users.id]
  title varchar [not null]
  description varchar
  content varchar [not null]
  created_at timestamptz [not null, default: `now()`]
  deleted_at timestamptz
  last_updated_at timestamptz
  last_updated_user_id int [ref: > users.id]
  is_draft bool [not null]
  is_private bool [not null]
  thumbnail_img_id int [ref: > images.id]
}

Table menus {
  id int [pk, increment]
  menu_code varchar [not null, unique]
  menu_header_img_id int [null, ref: > images.id]
}

Table menu_items {
  id int [pk, increment]
  menu_id int [not null, ref: > menus.id]
  menu_item_code varchar [not null]
  name varchar [not null]
  position int [not null]
  is_main bool [not null, default: false]
  description_post_id int [null, ref: > posts.id]
  entity_group_id int [null, ref: > entity_groups.id]
}

Table maps {
  id int [pk, increment]
  user_id int [not null, ref: > users.id]
  title varchar [not null]
  type varchar
  created_at timestamptz [not null, default: `now()`]
  last_updated_at timestamptz
  last_updated_user_id int [ref: > users.id]
  is_private bool [not null, default: false]
  description varchar
  width int [not null]
  height int [not null]
  thumbnail_image_id int [ref: > images.id]
}

Table locations {
  id int [pk, increment]
  name varchar [not null]
  description varchar
  post_id int [ref: > posts.id]
  thumbnail_image_id int [ref: > images.id]
}

Table map_layers {
  id int [pk, increment]
  name varchar [not null]
  map_id int [not null, ref: > maps.id]
  image_id int [not null, ref: > images.id]
  enabled bool [not null, default: true]
  position int [not null, note: 'Position 1 means main layer. Highest position = highest layer.']
}

Table map_pins {
  id int [pk, increment]
  name varchar [not null]
  map_id int [not null, ref: > maps.id]
  map_pin_type_id int [ref: > map_pin_types.id]
  location_id int [ref: > locations.id]
  map_layer_id int [ref: > map_layers.id]
  x int [not null]
  y int [not null]
}

Table map_pin_type_group {
  id int [pk, increment]
  name varchar [not null]
}

Table module_map_pin_type_groups {
  module_id int [not null, ref: > modules.id]
  map_pin_type_group_id int [not null, ref: > map_pin_type_group.id]

  indexes {
    (module_id, map_pin_type_group_id) [unique]
  }
}

Table map_pin_types {
  id int [pk, increment]
  map_pin_type_group_id int [not null, ref: > map_pin_type_group.id]
  shape pin_shape [not null, default: "pin"]
  background_color varchar
  border_color varchar
  icon_color varchar
  icon varchar
  icon_size int
  width int
  is_default bool [not null, default: false]
}

Table quests {
  id int [pk, increment]
  name varchar [not null, unique]
  public boolean [not null, default: false]
  created_at timestamptz [not null, default: `now()`]
  short_description varchar [not null, default: '']
  world_id int [ref: > worlds.id]
  system_id int [ref: > systems.id]
  status quest_status [not null, default: 'not_started']
  can_join boolean [not null, default: false]
}

Table systems {
  id int [pk, increment]
  name varchar [not null, unique]
  based_on varchar [not null]
  public boolean [not null, default: false]
  created_at timestamptz [not null, default: `now()`]
  short_description varchar [not null, default: '']
}

Table characters {
  id int [pk, increment]
  name varchar [not null, unique]
  public boolean [not null, default: false]
  created_at timestamptz [not null, default: `now()`]
  short_description varchar [not null, default: '']
  world_id int [ref: > worlds.id]
  system_id int [ref: > systems.id]
}

Table modules {
  id int [pk, increment]
  module_type module_type [not null]
  menu_id int [not null, ref: > menus.id]

  header_img_id int [ref: > images.id]
  thumbnail_img_id int [ref: > images.id]
  avatar_img_id int [ref: > images.id]

  world_id int [ref: > worlds.id]
  system_id int [ref: > systems.id]
  character_id int [ref: > characters.id]
  quest_id int [ref: > quests.id]

  description_post_id int [not null, ref: > posts.id]

  Note: 'Groups higher-level sections into one table. Contains worlds, quests, characters and play systems.'
}

Table module_type_tags_available {
  id int [pk, increment]
  module_type module_type [not null]
  tag varchar [not null]

  indexes {
    (module_type, tag) [unique]
  }

  Note: 'Contains all tags, that are available for module TYPE - so, users can mark their worlds / quests / ... with these tags. These are NOT for marking entities.'
}

Table module_tags {
  module_id int [not null, ref: > modules.id]
  tag_id int [not null, ref: > module_type_tags_available.id]

  indexes {
    (module_id, tag_id) [unique]
  }

  Note: 'Tag assignments for modules. So, if you are looking for what tags are assigned to a world, you can look here.'
}

Table module_entity_tags_available {
  id int [pk, increment]
  module_id int [not null, ref: > modules.id]
  tag varchar [not null]

indexes {
    (module_id, tag) [unique]
  }

  Note: 'Contains tags, that are possible to assign to ANY entity inside of a module. One module can only have one set of tags, that are usable for any entity type inside of that module.'
}

Table entity_tags {
  entity_id int [not null, ref: > entities.id]
  tag_id int [not null, ref: > module_entity_tags_available.id]

  indexes {
    (entity_id, tag_id) [unique]
  }

  Note: 'Assignments of module_entity_tags_available to entities'
}

Table entities {
  id int [pk, increment]
  module_id int [not null, ref: > modules.id]
  type entity_type [not null]
  post_id int [ref: > posts.id]
  map_id int [ref: > maps.id]
  location_id int [ref: > locations.id]
  image_id int [ref: > images.id]

  indexes {
    (type)
    (post_id, module_id) [unique]
    (map_id, module_id) [unique]
    (location_id, module_id) [unique]
    (image_id, module_id) [unique]
  }
}

Table entity_groups {
  id int [pk, increment]
  name varchar
  description varchar
  style varchar [default: "framed"]
  direction varchar [default: "vertical"]
}

Table entity_group_content {
  id int [pk, increment]
  entity_group_id int [not null, ref: > entity_groups.id]
  position int [not null]
  content_entity_id int [ref: > entities.id]
  content_entity_group_id int [ref: > entity_groups.id]
}

Table quest_characters {
  quest_id int [not null, ref: > quests.id]
  character_id int [not null, ref: > characters.id]
  created_at timestamptz [not null, default: `now()`]
  approved int [not null, note: '0 = NO, 1 = YES, 2 = PENDING']
  motivational_letter varchar [not null]

  indexes {
    (quest_id, character_id) [unique]
  }
}

enum quest_status {
  unknown
  not_started
  in_progress
  finished_completed
  finished_not_completed
}

//Ref: users.id < follows.following_user_id

//Ref: users.id < follows.followed_user_id
