// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/characters/service_characters.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Characters_CreateCharacter_FullMethodName      = "/pb.Characters/CreateCharacter"
	Characters_UpdateCharacter_FullMethodName      = "/pb.Characters/UpdateCharacter"
	Characters_UploadCharacterImage_FullMethodName = "/pb.Characters/UploadCharacterImage"
	Characters_GetCharacters_FullMethodName        = "/pb.Characters/GetCharacters"
	Characters_GetCharacterById_FullMethodName     = "/pb.Characters/GetCharacterById"
)

// CharactersClient is the client API for Characters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharactersClient interface {
	CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error)
	UpdateCharacter(ctx context.Context, in *UpdateCharacterRequest, opts ...grpc.CallOption) (*Character, error)
	UploadCharacterImage(ctx context.Context, in *UploadCharacterImageRequest, opts ...grpc.CallOption) (*Image, error)
	GetCharacters(ctx context.Context, in *GetCharactersRequest, opts ...grpc.CallOption) (*GetCharactersResponse, error)
	GetCharacterById(ctx context.Context, in *GetCharacterByIdRequest, opts ...grpc.CallOption) (*Character, error)
}

type charactersClient struct {
	cc grpc.ClientConnInterface
}

func NewCharactersClient(cc grpc.ClientConnInterface) CharactersClient {
	return &charactersClient{cc}
}

func (c *charactersClient) CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error) {
	out := new(CreateCharacterResponse)
	err := c.cc.Invoke(ctx, Characters_CreateCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) UpdateCharacter(ctx context.Context, in *UpdateCharacterRequest, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, Characters_UpdateCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) UploadCharacterImage(ctx context.Context, in *UploadCharacterImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, Characters_UploadCharacterImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) GetCharacters(ctx context.Context, in *GetCharactersRequest, opts ...grpc.CallOption) (*GetCharactersResponse, error) {
	out := new(GetCharactersResponse)
	err := c.cc.Invoke(ctx, Characters_GetCharacters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charactersClient) GetCharacterById(ctx context.Context, in *GetCharacterByIdRequest, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, Characters_GetCharacterById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharactersServer is the server API for Characters service.
// All implementations must embed UnimplementedCharactersServer
// for forward compatibility
type CharactersServer interface {
	CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error)
	UpdateCharacter(context.Context, *UpdateCharacterRequest) (*Character, error)
	UploadCharacterImage(context.Context, *UploadCharacterImageRequest) (*Image, error)
	GetCharacters(context.Context, *GetCharactersRequest) (*GetCharactersResponse, error)
	GetCharacterById(context.Context, *GetCharacterByIdRequest) (*Character, error)
	mustEmbedUnimplementedCharactersServer()
}

// UnimplementedCharactersServer must be embedded to have forward compatible implementations.
type UnimplementedCharactersServer struct {
}

func (UnimplementedCharactersServer) CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedCharactersServer) UpdateCharacter(context.Context, *UpdateCharacterRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCharacter not implemented")
}
func (UnimplementedCharactersServer) UploadCharacterImage(context.Context, *UploadCharacterImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCharacterImage not implemented")
}
func (UnimplementedCharactersServer) GetCharacters(context.Context, *GetCharactersRequest) (*GetCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacters not implemented")
}
func (UnimplementedCharactersServer) GetCharacterById(context.Context, *GetCharacterByIdRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterById not implemented")
}
func (UnimplementedCharactersServer) mustEmbedUnimplementedCharactersServer() {}

// UnsafeCharactersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharactersServer will
// result in compilation errors.
type UnsafeCharactersServer interface {
	mustEmbedUnimplementedCharactersServer()
}

func RegisterCharactersServer(s grpc.ServiceRegistrar, srv CharactersServer) {
	s.RegisterService(&Characters_ServiceDesc, srv)
}

func _Characters_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).CreateCharacter(ctx, req.(*CreateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_UpdateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).UpdateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_UpdateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).UpdateCharacter(ctx, req.(*UpdateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_UploadCharacterImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCharacterImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).UploadCharacterImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_UploadCharacterImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).UploadCharacterImage(ctx, req.(*UploadCharacterImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_GetCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).GetCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_GetCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).GetCharacters(ctx, req.(*GetCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Characters_GetCharacterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharactersServer).GetCharacterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Characters_GetCharacterById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharactersServer).GetCharacterById(ctx, req.(*GetCharacterByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Characters_ServiceDesc is the grpc.ServiceDesc for Characters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Characters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Characters",
	HandlerType: (*CharactersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCharacter",
			Handler:    _Characters_CreateCharacter_Handler,
		},
		{
			MethodName: "UpdateCharacter",
			Handler:    _Characters_UpdateCharacter_Handler,
		},
		{
			MethodName: "UploadCharacterImage",
			Handler:    _Characters_UploadCharacterImage_Handler,
		},
		{
			MethodName: "GetCharacters",
			Handler:    _Characters_GetCharacters_Handler,
		},
		{
			MethodName: "GetCharacterById",
			Handler:    _Characters_GetCharacterById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/characters/service_characters.proto",
}
