// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/quests/service_quests.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Quests_CreateQuest_FullMethodName          = "/pb.Quests/CreateQuest"
	Quests_UpdateQuest_FullMethodName          = "/pb.Quests/UpdateQuest"
	Quests_UploadQuestImage_FullMethodName     = "/pb.Quests/UploadQuestImage"
	Quests_GetQuests_FullMethodName            = "/pb.Quests/GetQuests"
	Quests_GetQuestById_FullMethodName         = "/pb.Quests/GetQuestById"
	Quests_CreateQuestCharacter_FullMethodName = "/pb.Quests/CreateQuestCharacter"
	Quests_UpdateQuestCharacter_FullMethodName = "/pb.Quests/UpdateQuestCharacter"
	Quests_DeleteQuestCharacter_FullMethodName = "/pb.Quests/DeleteQuestCharacter"
	Quests_GetQuestCharacters_FullMethodName   = "/pb.Quests/GetQuestCharacters"
)

// QuestsClient is the client API for Quests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestsClient interface {
	CreateQuest(ctx context.Context, in *CreateQuestRequest, opts ...grpc.CallOption) (*CreateQuestResponse, error)
	UpdateQuest(ctx context.Context, in *UpdateQuestRequest, opts ...grpc.CallOption) (*Quest, error)
	UploadQuestImage(ctx context.Context, in *UploadQuestImageRequest, opts ...grpc.CallOption) (*Image, error)
	GetQuests(ctx context.Context, in *GetQuestsRequest, opts ...grpc.CallOption) (*GetQuestsResponse, error)
	GetQuestById(ctx context.Context, in *GetQuestByIdRequest, opts ...grpc.CallOption) (*Quest, error)
	CreateQuestCharacter(ctx context.Context, in *CreateQuestCharacterRequest, opts ...grpc.CallOption) (*QuestCharacter, error)
	UpdateQuestCharacter(ctx context.Context, in *UpdateQuestCharacterRequest, opts ...grpc.CallOption) (*QuestCharacter, error)
	DeleteQuestCharacter(ctx context.Context, in *DeleteQuestCharacterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetQuestCharacters(ctx context.Context, in *GetQuestCharactersRequest, opts ...grpc.CallOption) (*GetQuestCharactersResponse, error)
}

type questsClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestsClient(cc grpc.ClientConnInterface) QuestsClient {
	return &questsClient{cc}
}

func (c *questsClient) CreateQuest(ctx context.Context, in *CreateQuestRequest, opts ...grpc.CallOption) (*CreateQuestResponse, error) {
	out := new(CreateQuestResponse)
	err := c.cc.Invoke(ctx, Quests_CreateQuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questsClient) UpdateQuest(ctx context.Context, in *UpdateQuestRequest, opts ...grpc.CallOption) (*Quest, error) {
	out := new(Quest)
	err := c.cc.Invoke(ctx, Quests_UpdateQuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questsClient) UploadQuestImage(ctx context.Context, in *UploadQuestImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, Quests_UploadQuestImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questsClient) GetQuests(ctx context.Context, in *GetQuestsRequest, opts ...grpc.CallOption) (*GetQuestsResponse, error) {
	out := new(GetQuestsResponse)
	err := c.cc.Invoke(ctx, Quests_GetQuests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questsClient) GetQuestById(ctx context.Context, in *GetQuestByIdRequest, opts ...grpc.CallOption) (*Quest, error) {
	out := new(Quest)
	err := c.cc.Invoke(ctx, Quests_GetQuestById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questsClient) CreateQuestCharacter(ctx context.Context, in *CreateQuestCharacterRequest, opts ...grpc.CallOption) (*QuestCharacter, error) {
	out := new(QuestCharacter)
	err := c.cc.Invoke(ctx, Quests_CreateQuestCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questsClient) UpdateQuestCharacter(ctx context.Context, in *UpdateQuestCharacterRequest, opts ...grpc.CallOption) (*QuestCharacter, error) {
	out := new(QuestCharacter)
	err := c.cc.Invoke(ctx, Quests_UpdateQuestCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questsClient) DeleteQuestCharacter(ctx context.Context, in *DeleteQuestCharacterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Quests_DeleteQuestCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questsClient) GetQuestCharacters(ctx context.Context, in *GetQuestCharactersRequest, opts ...grpc.CallOption) (*GetQuestCharactersResponse, error) {
	out := new(GetQuestCharactersResponse)
	err := c.cc.Invoke(ctx, Quests_GetQuestCharacters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestsServer is the server API for Quests service.
// All implementations must embed UnimplementedQuestsServer
// for forward compatibility
type QuestsServer interface {
	CreateQuest(context.Context, *CreateQuestRequest) (*CreateQuestResponse, error)
	UpdateQuest(context.Context, *UpdateQuestRequest) (*Quest, error)
	UploadQuestImage(context.Context, *UploadQuestImageRequest) (*Image, error)
	GetQuests(context.Context, *GetQuestsRequest) (*GetQuestsResponse, error)
	GetQuestById(context.Context, *GetQuestByIdRequest) (*Quest, error)
	CreateQuestCharacter(context.Context, *CreateQuestCharacterRequest) (*QuestCharacter, error)
	UpdateQuestCharacter(context.Context, *UpdateQuestCharacterRequest) (*QuestCharacter, error)
	DeleteQuestCharacter(context.Context, *DeleteQuestCharacterRequest) (*emptypb.Empty, error)
	GetQuestCharacters(context.Context, *GetQuestCharactersRequest) (*GetQuestCharactersResponse, error)
	mustEmbedUnimplementedQuestsServer()
}

// UnimplementedQuestsServer must be embedded to have forward compatible implementations.
type UnimplementedQuestsServer struct {
}

func (UnimplementedQuestsServer) CreateQuest(context.Context, *CreateQuestRequest) (*CreateQuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuest not implemented")
}
func (UnimplementedQuestsServer) UpdateQuest(context.Context, *UpdateQuestRequest) (*Quest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuest not implemented")
}
func (UnimplementedQuestsServer) UploadQuestImage(context.Context, *UploadQuestImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadQuestImage not implemented")
}
func (UnimplementedQuestsServer) GetQuests(context.Context, *GetQuestsRequest) (*GetQuestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuests not implemented")
}
func (UnimplementedQuestsServer) GetQuestById(context.Context, *GetQuestByIdRequest) (*Quest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestById not implemented")
}
func (UnimplementedQuestsServer) CreateQuestCharacter(context.Context, *CreateQuestCharacterRequest) (*QuestCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestCharacter not implemented")
}
func (UnimplementedQuestsServer) UpdateQuestCharacter(context.Context, *UpdateQuestCharacterRequest) (*QuestCharacter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestCharacter not implemented")
}
func (UnimplementedQuestsServer) DeleteQuestCharacter(context.Context, *DeleteQuestCharacterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestCharacter not implemented")
}
func (UnimplementedQuestsServer) GetQuestCharacters(context.Context, *GetQuestCharactersRequest) (*GetQuestCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestCharacters not implemented")
}
func (UnimplementedQuestsServer) mustEmbedUnimplementedQuestsServer() {}

// UnsafeQuestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestsServer will
// result in compilation errors.
type UnsafeQuestsServer interface {
	mustEmbedUnimplementedQuestsServer()
}

func RegisterQuestsServer(s grpc.ServiceRegistrar, srv QuestsServer) {
	s.RegisterService(&Quests_ServiceDesc, srv)
}

func _Quests_CreateQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).CreateQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_CreateQuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).CreateQuest(ctx, req.(*CreateQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quests_UpdateQuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).UpdateQuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_UpdateQuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).UpdateQuest(ctx, req.(*UpdateQuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quests_UploadQuestImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadQuestImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).UploadQuestImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_UploadQuestImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).UploadQuestImage(ctx, req.(*UploadQuestImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quests_GetQuests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).GetQuests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_GetQuests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).GetQuests(ctx, req.(*GetQuestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quests_GetQuestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).GetQuestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_GetQuestById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).GetQuestById(ctx, req.(*GetQuestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quests_CreateQuestCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).CreateQuestCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_CreateQuestCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).CreateQuestCharacter(ctx, req.(*CreateQuestCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quests_UpdateQuestCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).UpdateQuestCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_UpdateQuestCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).UpdateQuestCharacter(ctx, req.(*UpdateQuestCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quests_DeleteQuestCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).DeleteQuestCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_DeleteQuestCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).DeleteQuestCharacter(ctx, req.(*DeleteQuestCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quests_GetQuestCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestsServer).GetQuestCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Quests_GetQuestCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestsServer).GetQuestCharacters(ctx, req.(*GetQuestCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Quests_ServiceDesc is the grpc.ServiceDesc for Quests service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quests_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Quests",
	HandlerType: (*QuestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuest",
			Handler:    _Quests_CreateQuest_Handler,
		},
		{
			MethodName: "UpdateQuest",
			Handler:    _Quests_UpdateQuest_Handler,
		},
		{
			MethodName: "UploadQuestImage",
			Handler:    _Quests_UploadQuestImage_Handler,
		},
		{
			MethodName: "GetQuests",
			Handler:    _Quests_GetQuests_Handler,
		},
		{
			MethodName: "GetQuestById",
			Handler:    _Quests_GetQuestById_Handler,
		},
		{
			MethodName: "CreateQuestCharacter",
			Handler:    _Quests_CreateQuestCharacter_Handler,
		},
		{
			MethodName: "UpdateQuestCharacter",
			Handler:    _Quests_UpdateQuestCharacter_Handler,
		},
		{
			MethodName: "DeleteQuestCharacter",
			Handler:    _Quests_DeleteQuestCharacter_Handler,
		},
		{
			MethodName: "GetQuestCharacters",
			Handler:    _Quests_GetQuestCharacters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/quests/service_quests.proto",
}
