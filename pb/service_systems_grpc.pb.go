// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: services/systems/service_systems.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Systems_CreateSystem_FullMethodName      = "/pb.Systems/CreateSystem"
	Systems_UpdateSystem_FullMethodName      = "/pb.Systems/UpdateSystem"
	Systems_UploadSystemImage_FullMethodName = "/pb.Systems/UploadSystemImage"
	Systems_GetSystems_FullMethodName        = "/pb.Systems/GetSystems"
	Systems_GetSystemById_FullMethodName     = "/pb.Systems/GetSystemById"
)

// SystemsClient is the client API for Systems service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemsClient interface {
	CreateSystem(ctx context.Context, in *CreateSystemRequest, opts ...grpc.CallOption) (*CreateSystemResponse, error)
	UpdateSystem(ctx context.Context, in *UpdateSystemRequest, opts ...grpc.CallOption) (*System, error)
	UploadSystemImage(ctx context.Context, in *UploadSystemImageRequest, opts ...grpc.CallOption) (*Image, error)
	GetSystems(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*GetSystemsResponse, error)
	GetSystemById(ctx context.Context, in *GetSystemByIdRequest, opts ...grpc.CallOption) (*System, error)
}

type systemsClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemsClient(cc grpc.ClientConnInterface) SystemsClient {
	return &systemsClient{cc}
}

func (c *systemsClient) CreateSystem(ctx context.Context, in *CreateSystemRequest, opts ...grpc.CallOption) (*CreateSystemResponse, error) {
	out := new(CreateSystemResponse)
	err := c.cc.Invoke(ctx, Systems_CreateSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) UpdateSystem(ctx context.Context, in *UpdateSystemRequest, opts ...grpc.CallOption) (*System, error) {
	out := new(System)
	err := c.cc.Invoke(ctx, Systems_UpdateSystem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) UploadSystemImage(ctx context.Context, in *UploadSystemImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, Systems_UploadSystemImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) GetSystems(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*GetSystemsResponse, error) {
	out := new(GetSystemsResponse)
	err := c.cc.Invoke(ctx, Systems_GetSystems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) GetSystemById(ctx context.Context, in *GetSystemByIdRequest, opts ...grpc.CallOption) (*System, error) {
	out := new(System)
	err := c.cc.Invoke(ctx, Systems_GetSystemById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemsServer is the server API for Systems service.
// All implementations must embed UnimplementedSystemsServer
// for forward compatibility
type SystemsServer interface {
	CreateSystem(context.Context, *CreateSystemRequest) (*CreateSystemResponse, error)
	UpdateSystem(context.Context, *UpdateSystemRequest) (*System, error)
	UploadSystemImage(context.Context, *UploadSystemImageRequest) (*Image, error)
	GetSystems(context.Context, *GetSystemsRequest) (*GetSystemsResponse, error)
	GetSystemById(context.Context, *GetSystemByIdRequest) (*System, error)
	mustEmbedUnimplementedSystemsServer()
}

// UnimplementedSystemsServer must be embedded to have forward compatible implementations.
type UnimplementedSystemsServer struct {
}

func (UnimplementedSystemsServer) CreateSystem(context.Context, *CreateSystemRequest) (*CreateSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystem not implemented")
}
func (UnimplementedSystemsServer) UpdateSystem(context.Context, *UpdateSystemRequest) (*System, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystem not implemented")
}
func (UnimplementedSystemsServer) UploadSystemImage(context.Context, *UploadSystemImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSystemImage not implemented")
}
func (UnimplementedSystemsServer) GetSystems(context.Context, *GetSystemsRequest) (*GetSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystems not implemented")
}
func (UnimplementedSystemsServer) GetSystemById(context.Context, *GetSystemByIdRequest) (*System, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemById not implemented")
}
func (UnimplementedSystemsServer) mustEmbedUnimplementedSystemsServer() {}

// UnsafeSystemsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemsServer will
// result in compilation errors.
type UnsafeSystemsServer interface {
	mustEmbedUnimplementedSystemsServer()
}

func RegisterSystemsServer(s grpc.ServiceRegistrar, srv SystemsServer) {
	s.RegisterService(&Systems_ServiceDesc, srv)
}

func _Systems_CreateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).CreateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Systems_CreateSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).CreateSystem(ctx, req.(*CreateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_UpdateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).UpdateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Systems_UpdateSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).UpdateSystem(ctx, req.(*UpdateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_UploadSystemImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSystemImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).UploadSystemImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Systems_UploadSystemImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).UploadSystemImage(ctx, req.(*UploadSystemImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_GetSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).GetSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Systems_GetSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).GetSystems(ctx, req.(*GetSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_GetSystemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).GetSystemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Systems_GetSystemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).GetSystemById(ctx, req.(*GetSystemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Systems_ServiceDesc is the grpc.ServiceDesc for Systems service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Systems_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Systems",
	HandlerType: (*SystemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSystem",
			Handler:    _Systems_CreateSystem_Handler,
		},
		{
			MethodName: "UpdateSystem",
			Handler:    _Systems_UpdateSystem_Handler,
		},
		{
			MethodName: "UploadSystemImage",
			Handler:    _Systems_UploadSystemImage_Handler,
		},
		{
			MethodName: "GetSystems",
			Handler:    _Systems_GetSystems_Handler,
		},
		{
			MethodName: "GetSystemById",
			Handler:    _Systems_GetSystemById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/systems/service_systems.proto",
}
